
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  00003028  000030bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080014e  0080014e  000031aa  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122d  00000000  00000000  00005b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b124  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b566  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e3       	ldi	r26, 0x38	; 56
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e3       	ldi	r22, 0x38	; 56
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
 */
volatile uint8 g_Control = 0, wrongTry = 0, g_counter = 0;
TimerConfig s_timer1Config = {TIMER1, COMPARE, 0, F_CPU_1024, 7812};   /* Timer1 configuration structure */

int main()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	e6 97       	sbiw	r28, 0x36	; 54
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	/*
	 * result is a variable to hold the result of comparing the new password and the reentered one
	 * s_UARTConfig UART configuration structure
	 */
	UART_config s_UARTConfig = {EIGHT_BITS, NO_PARITY, ONE, 9600};
     cb2:	ce 01       	movw	r24, r28
     cb4:	8b 96       	adiw	r24, 0x2b	; 43
     cb6:	9b ab       	std	Y+51, r25	; 0x33
     cb8:	8a ab       	std	Y+50, r24	; 0x32
     cba:	e7 e4       	ldi	r30, 0x47	; 71
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	fd ab       	std	Y+53, r31	; 0x35
     cc0:	ec ab       	std	Y+52, r30	; 0x34
     cc2:	f7 e0       	ldi	r31, 0x07	; 7
     cc4:	fe ab       	std	Y+54, r31	; 0x36
     cc6:	ec a9       	ldd	r30, Y+52	; 0x34
     cc8:	fd a9       	ldd	r31, Y+53	; 0x35
     cca:	00 80       	ld	r0, Z
     ccc:	8c a9       	ldd	r24, Y+52	; 0x34
     cce:	9d a9       	ldd	r25, Y+53	; 0x35
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9d ab       	std	Y+53, r25	; 0x35
     cd4:	8c ab       	std	Y+52, r24	; 0x34
     cd6:	ea a9       	ldd	r30, Y+50	; 0x32
     cd8:	fb a9       	ldd	r31, Y+51	; 0x33
     cda:	00 82       	st	Z, r0
     cdc:	8a a9       	ldd	r24, Y+50	; 0x32
     cde:	9b a9       	ldd	r25, Y+51	; 0x33
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	9b ab       	std	Y+51, r25	; 0x33
     ce4:	8a ab       	std	Y+50, r24	; 0x32
     ce6:	9e a9       	ldd	r25, Y+54	; 0x36
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	9e ab       	std	Y+54, r25	; 0x36
     cec:	ee a9       	ldd	r30, Y+54	; 0x36
     cee:	ee 23       	and	r30, r30
     cf0:	51 f7       	brne	.-44     	; 0xcc6 <main+0x28>

	UART_init(&s_UARTConfig);        /* Initialize UART with the specified frame in the UART configuration structure */
     cf2:	ce 01       	movw	r24, r28
     cf4:	8b 96       	adiw	r24, 0x2b	; 43
     cf6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <UART_init>
	UART_sendByte(HMI_MCU_READY);    /* Send a ready message to Control_MUC to receive the EEPROM flag */
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
	OnceFlag = UART_receiveByte();   /* Receive the EEPROM flag */
     d00:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_receiveByte>
     d04:	80 93 4e 01 	sts	0x014E, r24

	LCD_init();
     d08:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_init>
	LCD_displayStringRowColumn(1,5,"Welcome");
     d0c:	20 e6       	ldi	r18, 0x60	; 96
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	65 e0       	ldi	r22, 0x05	; 5
     d14:	a9 01       	movw	r20, r18
     d16:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	aa ef       	ldi	r26, 0xFA	; 250
     d20:	b3 e4       	ldi	r27, 0x43	; 67
     d22:	8f a3       	std	Y+39, r24	; 0x27
     d24:	98 a7       	std	Y+40, r25	; 0x28
     d26:	a9 a7       	std	Y+41, r26	; 0x29
     d28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	6f a1       	ldd	r22, Y+39	; 0x27
     d2c:	78 a5       	ldd	r23, Y+40	; 0x28
     d2e:	89 a5       	ldd	r24, Y+41	; 0x29
     d30:	9a a5       	ldd	r25, Y+42	; 0x2a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a ef       	ldi	r20, 0xFA	; 250
     d38:	54 e4       	ldi	r21, 0x44	; 68
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8b a3       	std	Y+35, r24	; 0x23
     d44:	9c a3       	std	Y+36, r25	; 0x24
     d46:	ad a3       	std	Y+37, r26	; 0x25
     d48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d4a:	6b a1       	ldd	r22, Y+35	; 0x23
     d4c:	7c a1       	ldd	r23, Y+36	; 0x24
     d4e:	8d a1       	ldd	r24, Y+37	; 0x25
     d50:	9e a1       	ldd	r25, Y+38	; 0x26
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <main+0xce>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9a a3       	std	Y+34, r25	; 0x22
     d68:	89 a3       	std	Y+33, r24	; 0x21
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <main+0x14c>
	else if (__tmp > 65535)
     d6c:	6b a1       	ldd	r22, Y+35	; 0x23
     d6e:	7c a1       	ldd	r23, Y+36	; 0x24
     d70:	8d a1       	ldd	r24, Y+37	; 0x25
     d72:	9e a1       	ldd	r25, Y+38	; 0x26
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	6f a1       	ldd	r22, Y+39	; 0x27
     d86:	78 a5       	ldd	r23, Y+40	; 0x28
     d88:	89 a5       	ldd	r24, Y+41	; 0x29
     d8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9a a3       	std	Y+34, r25	; 0x22
     daa:	89 a3       	std	Y+33, r24	; 0x21
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <main+0x12e>
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	98 a3       	std	Y+32, r25	; 0x20
     db4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db8:	98 a1       	ldd	r25, Y+32	; 0x20
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <main+0x11c>
     dbe:	98 a3       	std	Y+32, r25	; 0x20
     dc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	89 a1       	ldd	r24, Y+33	; 0x21
     dc4:	9a a1       	ldd	r25, Y+34	; 0x22
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a a3       	std	Y+34, r25	; 0x22
     dca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	89 a1       	ldd	r24, Y+33	; 0x21
     dce:	9a a1       	ldd	r25, Y+34	; 0x22
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <main+0x110>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6b a1       	ldd	r22, Y+35	; 0x23
     dd8:	7c a1       	ldd	r23, Y+36	; 0x24
     dda:	8d a1       	ldd	r24, Y+37	; 0x25
     ddc:	9e a1       	ldd	r25, Y+38	; 0x26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9a a3       	std	Y+34, r25	; 0x22
     de8:	89 a3       	std	Y+33, r24	; 0x21
     dea:	89 a1       	ldd	r24, Y+33	; 0x21
     dec:	9a a1       	ldd	r25, Y+34	; 0x22
     dee:	9e 8f       	std	Y+30, r25	; 0x1e
     df0:	8d 8f       	std	Y+29, r24	; 0x1d
     df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x158>
     dfa:	9e 8f       	std	Y+30, r25	; 0x1e
     dfc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_clearScreen();
     dfe:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>

	SET_BIT(SREG, 7);   /* Enable The global interrupt */
     e02:	af e5       	ldi	r26, 0x5F	; 95
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	ef e5       	ldi	r30, 0x5F	; 95
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	80 68       	ori	r24, 0x80	; 128
     e0e:	8c 93       	st	X, r24

	Timer1_setCallBack(App_timer1);   /* Set timer1 call back to App_timer1()function to handle the ISR */
     e10:	87 e4       	ldi	r24, 0x47	; 71
     e12:	9b e0       	ldi	r25, 0x0B	; 11
     e14:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <Timer1_setCallBack>

	UART_setCallBack(App_receiveControl);   /* Set UART call back to App_receiveControl()function to handle the ISR */
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	9b e0       	ldi	r25, 0x0B	; 11
     e1c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <UART_setCallBack>
		 * Once flag holds the value of address 0 in EEPROM which is 0xFF in the beginning
		 * Execute App_newPassword() function to create a new password in the first time in lifetime
		 * OnceFlag=0x02 and send this byte to Control_MCU to make the value of address0 in EEPROM 0x02
		 * In the end of the first run of the program the flag became 0x03 so this code will run once in lifetime
		 */
		if(0xFF == OnceFlag)
     e20:	80 91 4e 01 	lds	r24, 0x014E
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	49 f4       	brne	.+18     	; 0xe3a <main+0x19c>
		{
			App_newPassword();
     e28:	0e 94 a2 08 	call	0x1144	; 0x1144 <App_newPassword>
			OnceFlag = DONE_ONCE;
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	80 93 4e 01 	sts	0x014E, r24
			UART_sendByte(OnceFlag);
     e32:	80 91 4e 01 	lds	r24, 0x014E
     e36:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
		 * g_Control=0 in the first of every run of the program to make the user enter the password
		 * Store the password in Password array
		 * Send PW to Control_MCU to make it ready to receive the stored password
		 * Wait the reply of Control_MCU which is correct or wrong password
		 */
		if(0 == g_Control)
     e3a:	80 91 4f 01 	lds	r24, 0x014F
     e3e:	88 23       	and	r24, r24
     e40:	09 f5       	brne	.+66     	; 0xe84 <main+0x1e6>
		{
			LCD_displayStringRowColumn(1, 1, " Enter The Pass");
     e42:	28 e6       	ldi	r18, 0x68	; 104
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	a9 01       	movw	r20, r18
     e4c:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2, 1, "              ");
     e50:	28 e7       	ldi	r18, 0x78	; 120
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	a9 01       	movw	r20, r18
     e5a:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_getPassword(Password);
     e5e:	8d e5       	ldi	r24, 0x5D	; 93
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>
			UART_sendByte(PW);
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			UART_sendString(Password);
     e6c:	8d e5       	ldi	r24, 0x5D	; 93
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <UART_sendString>
			g_Control = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	80 93 4f 01 	sts	0x014F, r24
			while(1 == g_Control);
     e7a:	80 91 4f 01 	lds	r24, 0x014F
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	e1 f3       	breq	.-8      	; 0xe7a <main+0x1dc>
     e82:	ce cf       	rjmp	.-100    	; 0xe20 <main+0x182>
		}   /* End if(0==g_Control) */
		/*
		 * If the global flag became 2 it means that the entered password is correct
		 * Then go to App_mainOptions() function to open the door or change the password
		 */
		else if(2 == g_Control)
     e84:	80 91 4f 01 	lds	r24, 0x014F
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	31 f4       	brne	.+12     	; 0xe98 <main+0x1fa>
		{
			g_Control = 2;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	80 93 4f 01 	sts	0x014F, r24
			App_mainOptions();
     e92:	0e 94 ad 0a 	call	0x155a	; 0x155a <App_mainOptions>
     e96:	c4 cf       	rjmp	.-120    	; 0xe20 <main+0x182>
		 * If the first entered password is wrong
		 * Ask the user to enter the password again
		 * Every time he entered the PW send this PW to Control_MCU to check if this PW is correct or wrong
		 * Wait for the reply of Control_MCU
		 */
		else if(3 == g_Control)
     e98:	80 91 4f 01 	lds	r24, 0x014F
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	09 f0       	breq	.+2      	; 0xea2 <main+0x204>
     ea0:	95 c0       	rjmp	.+298    	; 0xfcc <main+0x32e>
		{
			g_Control = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 4f 01 	sts	0x014F, r24

			LCD_clearScreen();
     ea8:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1, 5,"Wrong");
     eac:	27 e8       	ldi	r18, 0x87	; 135
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	65 e0       	ldi	r22, 0x05	; 5
     eb4:	a9 01       	movw	r20, r18
     eb6:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	aa ef       	ldi	r26, 0xFA	; 250
     ec0:	b3 e4       	ldi	r27, 0x43	; 67
     ec2:	89 8f       	std	Y+25, r24	; 0x19
     ec4:	9a 8f       	std	Y+26, r25	; 0x1a
     ec6:	ab 8f       	std	Y+27, r26	; 0x1b
     ec8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eca:	69 8d       	ldd	r22, Y+25	; 0x19
     ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	4a ef       	ldi	r20, 0xFA	; 250
     ed8:	54 e4       	ldi	r21, 0x44	; 68
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8d 8b       	std	Y+21, r24	; 0x15
     ee4:	9e 8b       	std	Y+22, r25	; 0x16
     ee6:	af 8b       	std	Y+23, r26	; 0x17
     ee8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eea:	6d 89       	ldd	r22, Y+21	; 0x15
     eec:	7e 89       	ldd	r23, Y+22	; 0x16
     eee:	8f 89       	ldd	r24, Y+23	; 0x17
     ef0:	98 8d       	ldd	r25, Y+24	; 0x18
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efe:	88 23       	and	r24, r24
     f00:	2c f4       	brge	.+10     	; 0xf0c <main+0x26e>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9c 8b       	std	Y+20, r25	; 0x14
     f08:	8b 8b       	std	Y+19, r24	; 0x13
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <main+0x2ec>
	else if (__tmp > 65535)
     f0c:	6d 89       	ldd	r22, Y+21	; 0x15
     f0e:	7e 89       	ldd	r23, Y+22	; 0x16
     f10:	8f 89       	ldd	r24, Y+23	; 0x17
     f12:	98 8d       	ldd	r25, Y+24	; 0x18
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f20:	18 16       	cp	r1, r24
     f22:	4c f5       	brge	.+82     	; 0xf76 <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	69 8d       	ldd	r22, Y+25	; 0x19
     f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9c 8b       	std	Y+20, r25	; 0x14
     f4a:	8b 8b       	std	Y+19, r24	; 0x13
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <main+0x2ce>
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9a 8b       	std	Y+18, r25	; 0x12
     f54:	89 8b       	std	Y+17, r24	; 0x11
     f56:	89 89       	ldd	r24, Y+17	; 0x11
     f58:	9a 89       	ldd	r25, Y+18	; 0x12
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <main+0x2bc>
     f5e:	9a 8b       	std	Y+18, r25	; 0x12
     f60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	8b 89       	ldd	r24, Y+19	; 0x13
     f64:	9c 89       	ldd	r25, Y+20	; 0x14
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9c 8b       	std	Y+20, r25	; 0x14
     f6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	8b 89       	ldd	r24, Y+19	; 0x13
     f6e:	9c 89       	ldd	r25, Y+20	; 0x14
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	69 f7       	brne	.-38     	; 0xf4e <main+0x2b0>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	6d 89       	ldd	r22, Y+21	; 0x15
     f78:	7e 89       	ldd	r23, Y+22	; 0x16
     f7a:	8f 89       	ldd	r24, Y+23	; 0x17
     f7c:	98 8d       	ldd	r25, Y+24	; 0x18
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9c 8b       	std	Y+20, r25	; 0x14
     f88:	8b 8b       	std	Y+19, r24	; 0x13
     f8a:	8b 89       	ldd	r24, Y+19	; 0x13
     f8c:	9c 89       	ldd	r25, Y+20	; 0x14
     f8e:	98 8b       	std	Y+16, r25	; 0x10
     f90:	8f 87       	std	Y+15, r24	; 0x0f
     f92:	8f 85       	ldd	r24, Y+15	; 0x0f
     f94:	98 89       	ldd	r25, Y+16	; 0x10
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <main+0x2f8>
     f9a:	98 8b       	std	Y+16, r25	; 0x10
     f9c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_displayStringRowColumn(1, 1, "Enter Pass again");
     f9e:	2d e8       	ldi	r18, 0x8D	; 141
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	a9 01       	movw	r20, r18
     fa8:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_getPassword(Password);
     fac:	8d e5       	ldi	r24, 0x5D	; 93
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>
			UART_sendByte(PW);
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			UART_sendString(Password);
     fba:	8d e5       	ldi	r24, 0x5D	; 93
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <UART_sendString>
			while(0 == g_Control);
     fc2:	80 91 4f 01 	lds	r24, 0x014F
     fc6:	88 23       	and	r24, r24
     fc8:	e1 f3       	breq	.-8      	; 0xfc2 <main+0x324>
     fca:	2a cf       	rjmp	.-428    	; 0xe20 <main+0x182>
		 * If the user Entered the wrong PW 3 times
		 * Send BUZ_ON message to Control_MCU to turn on the buzzer
		 * then display"Error"message on LCD for 1 minute while the buzzer is running
		 * Then set the global flag to 0 to enter the PW
		 */
		else if(4 == g_Control)
     fcc:	80 91 4f 01 	lds	r24, 0x014F
     fd0:	84 30       	cpi	r24, 0x04	; 4
     fd2:	91 f4       	brne	.+36     	; 0xff8 <main+0x35a>
		{
			UART_sendByte(BUZZ_ON);
     fd4:	88 e0       	ldi	r24, 0x08	; 8
     fd6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			LCD_clearScreen();
     fda:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1,5, "Error");
     fde:	2e e9       	ldi	r18, 0x9E	; 158
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	65 e0       	ldi	r22, 0x05	; 5
     fe6:	a9 01       	movw	r20, r18
     fe8:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_timerDelay(60);
     fec:	8c e3       	ldi	r24, 0x3C	; 60
     fee:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <App_timerDelay>
			g_Control = 0;
     ff2:	10 92 4f 01 	sts	0x014F, r1
     ff6:	14 cf       	rjmp	.-472    	; 0xe20 <main+0x182>
		/*
		 * If the user chose to change the PW and entered the old PW correctly
		 * Execute App_newPassword()function to allow user to create a new PW
		 * Set the global control flag to 2
		 */
		else if(5 == g_Control)
     ff8:	80 91 4f 01 	lds	r24, 0x014F
     ffc:	85 30       	cpi	r24, 0x05	; 5
     ffe:	31 f4       	brne	.+12     	; 0x100c <main+0x36e>
		{
			App_newPassword();
    1000:	0e 94 a2 08 	call	0x1144	; 0x1144 <App_newPassword>
			g_Control = 2;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	80 93 4f 01 	sts	0x014F, r24
    100a:	0a cf       	rjmp	.-492    	; 0xe20 <main+0x182>
		 * Display Wrong for 0.5second then ask him to enter the correct old PW
		 * Store the entered PW in Password array then send OLD_PW message to Control_MCU to make it ready to receive
		 *  the entered password
		 * Wait the reply of Control_MCU
		 */
		else if(6 == g_Control)
    100c:	80 91 4f 01 	lds	r24, 0x014F
    1010:	86 30       	cpi	r24, 0x06	; 6
    1012:	09 f0       	breq	.+2      	; 0x1016 <main+0x378>
    1014:	05 cf       	rjmp	.-502    	; 0xe20 <main+0x182>
		{
			g_Control = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 4f 01 	sts	0x014F, r24
			LCD_clearScreen();
    101c:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1, 5,"Wrong");
    1020:	27 e8       	ldi	r18, 0x87	; 135
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	65 e0       	ldi	r22, 0x05	; 5
    1028:	a9 01       	movw	r20, r18
    102a:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	aa ef       	ldi	r26, 0xFA	; 250
    1034:	b3 e4       	ldi	r27, 0x43	; 67
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
    103a:	ad 87       	std	Y+13, r26	; 0x0d
    103c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f 83       	std	Y+7, r24	; 0x07
    1058:	98 87       	std	Y+8, r25	; 0x08
    105a:	a9 87       	std	Y+9, r26	; 0x09
    105c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105e:	6f 81       	ldd	r22, Y+7	; 0x07
    1060:	78 85       	ldd	r23, Y+8	; 0x08
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <main+0x3e2>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <main+0x460>
	else if (__tmp > 65535)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <main+0x442>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <main+0x430>
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <main+0x424>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <main+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <main+0x46c>
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    1112:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1,1,"Enter The old PW");
    1116:	24 ea       	ldi	r18, 0xA4	; 164
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	a9 01       	movw	r20, r18
    1120:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_getPassword(Password);
    1124:	8d e5       	ldi	r24, 0x5D	; 93
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>
			UART_sendByte(OLD_PW);
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			UART_sendString(Password);
    1132:	8d e5       	ldi	r24, 0x5D	; 93
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <UART_sendString>
			while(1 == g_Control);
    113a:	80 91 4f 01 	lds	r24, 0x014F
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	e1 f3       	breq	.-8      	; 0x113a <main+0x49c>
    1142:	6e ce       	rjmp	.-804    	; 0xe20 <main+0x182>

00001144 <App_newPassword>:
}   /* End main()function */

/*----------------------------------->Functions definitions<------------------------------------------*/
/* A function to make new password */
void App_newPassword()
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	6d 97       	sbiw	r28, 0x1d	; 29
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
	 * Send NEW_PW message to Control_MCU to store it in EEPROM
	 * Then tell the user that the new PW is confirmed
	 */
	uint8 result;

	LCD_displayStringRowColumn(1,1,"Enter new Pass  ");
    1158:	25 eb       	ldi	r18, 0xB5	; 181
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	a9 01       	movw	r20, r18
    1162:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,1,"                ");   /* Clear the second row to enter password */
    1166:	26 ec       	ldi	r18, 0xC6	; 198
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	a9 01       	movw	r20, r18
    1170:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
	App_getPassword(NewPassword);
    1174:	84 e6       	ldi	r24, 0x64	; 100
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>

	do
	{
		LCD_displayStringRowColumn(1,1,"ReEnter Password");
    117c:	27 ed       	ldi	r18, 0xD7	; 215
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2,1,"                ");
    118a:	26 ec       	ldi	r18, 0xC6	; 198
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	a9 01       	movw	r20, r18
    1194:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
		App_getPassword(againPassword0);
    1198:	86 e5       	ldi	r24, 0x56	; 86
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>
		result = strcmp((char*)NewPassword, (char*)againPassword0);
    11a0:	84 e6       	ldi	r24, 0x64	; 100
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	26 e5       	ldi	r18, 0x56	; 86
    11a6:	31 e0       	ldi	r19, 0x01	; 1
    11a8:	b9 01       	movw	r22, r18
    11aa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <strcmp>
    11ae:	8d 8f       	std	Y+29, r24	; 0x1d

		if(0 != result)
    11b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b2:	88 23       	and	r24, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <App_newPassword+0x74>
    11b6:	7b c0       	rjmp	.+246    	; 0x12ae <App_newPassword+0x16a>
		{
			LCD_clearScreen();
    11b8:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1, 5,"Wrong");
    11bc:	27 e8       	ldi	r18, 0x87	; 135
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	65 e0       	ldi	r22, 0x05	; 5
    11c4:	a9 01       	movw	r20, r18
    11c6:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	aa ef       	ldi	r26, 0xFA	; 250
    11d0:	b3 e4       	ldi	r27, 0x43	; 67
    11d2:	89 8f       	std	Y+25, r24	; 0x19
    11d4:	9a 8f       	std	Y+26, r25	; 0x1a
    11d6:	ab 8f       	std	Y+27, r26	; 0x1b
    11d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11da:	69 8d       	ldd	r22, Y+25	; 0x19
    11dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4a ef       	ldi	r20, 0xFA	; 250
    11e8:	54 e4       	ldi	r21, 0x44	; 68
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	8d 8b       	std	Y+21, r24	; 0x15
    11f4:	9e 8b       	std	Y+22, r25	; 0x16
    11f6:	af 8b       	std	Y+23, r26	; 0x17
    11f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11fa:	6d 89       	ldd	r22, Y+21	; 0x15
    11fc:	7e 89       	ldd	r23, Y+22	; 0x16
    11fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1200:	98 8d       	ldd	r25, Y+24	; 0x18
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	2c f4       	brge	.+10     	; 0x121c <App_newPassword+0xd8>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c 8b       	std	Y+20, r25	; 0x14
    1218:	8b 8b       	std	Y+19, r24	; 0x13
    121a:	3f c0       	rjmp	.+126    	; 0x129a <App_newPassword+0x156>
	else if (__tmp > 65535)
    121c:	6d 89       	ldd	r22, Y+21	; 0x15
    121e:	7e 89       	ldd	r23, Y+22	; 0x16
    1220:	8f 89       	ldd	r24, Y+23	; 0x17
    1222:	98 8d       	ldd	r25, Y+24	; 0x18
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	57 e4       	ldi	r21, 0x47	; 71
    122c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1230:	18 16       	cp	r1, r24
    1232:	4c f5       	brge	.+82     	; 0x1286 <App_newPassword+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1234:	69 8d       	ldd	r22, Y+25	; 0x19
    1236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9c 8b       	std	Y+20, r25	; 0x14
    125a:	8b 8b       	std	Y+19, r24	; 0x13
    125c:	0f c0       	rjmp	.+30     	; 0x127c <App_newPassword+0x138>
    125e:	88 ec       	ldi	r24, 0xC8	; 200
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9a 8b       	std	Y+18, r25	; 0x12
    1264:	89 8b       	std	Y+17, r24	; 0x11
    1266:	89 89       	ldd	r24, Y+17	; 0x11
    1268:	9a 89       	ldd	r25, Y+18	; 0x12
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <App_newPassword+0x126>
    126e:	9a 8b       	std	Y+18, r25	; 0x12
    1270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	8b 89       	ldd	r24, Y+19	; 0x13
    1274:	9c 89       	ldd	r25, Y+20	; 0x14
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9c 8b       	std	Y+20, r25	; 0x14
    127a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	8b 89       	ldd	r24, Y+19	; 0x13
    127e:	9c 89       	ldd	r25, Y+20	; 0x14
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	69 f7       	brne	.-38     	; 0x125e <App_newPassword+0x11a>
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <App_newPassword+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	98 8b       	std	Y+16, r25	; 0x10
    12a0:	8f 87       	std	Y+15, r24	; 0x0f
    12a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a4:	98 89       	ldd	r25, Y+16	; 0x10
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <App_newPassword+0x162>
    12aa:	98 8b       	std	Y+16, r25	; 0x10
    12ac:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
		}
	}while(0 != result);
    12ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b0:	88 23       	and	r24, r24
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <App_newPassword+0x172>
    12b4:	63 cf       	rjmp	.-314    	; 0x117c <App_newPassword+0x38>

	UART_sendByte(NEW_PW);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
	UART_sendString(againPassword0);
    12bc:	86 e5       	ldi	r24, 0x56	; 86
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <UART_sendString>
	LCD_clearScreen();
    12c4:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
	LCD_displayStringRowColumn(1, 4, "Confirmed");   /* The second password is matched with the new one */
    12c8:	28 ee       	ldi	r18, 0xE8	; 232
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	64 e0       	ldi	r22, 0x04	; 4
    12d0:	a9 01       	movw	r20, r18
    12d2:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	aa ef       	ldi	r26, 0xFA	; 250
    12dc:	b3 e4       	ldi	r27, 0x43	; 67
    12de:	8b 87       	std	Y+11, r24	; 0x0b
    12e0:	9c 87       	std	Y+12, r25	; 0x0c
    12e2:	ad 87       	std	Y+13, r26	; 0x0d
    12e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4a ef       	ldi	r20, 0xFA	; 250
    12f4:	54 e4       	ldi	r21, 0x44	; 68
    12f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8f 83       	std	Y+7, r24	; 0x07
    1300:	98 87       	std	Y+8, r25	; 0x08
    1302:	a9 87       	std	Y+9, r26	; 0x09
    1304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1306:	6f 81       	ldd	r22, Y+7	; 0x07
    1308:	78 85       	ldd	r23, Y+8	; 0x08
    130a:	89 85       	ldd	r24, Y+9	; 0x09
    130c:	9a 85       	ldd	r25, Y+10	; 0x0a
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5f e3       	ldi	r21, 0x3F	; 63
    1316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131a:	88 23       	and	r24, r24
    131c:	2c f4       	brge	.+10     	; 0x1328 <App_newPassword+0x1e4>
		__ticks = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	3f c0       	rjmp	.+126    	; 0x13a6 <App_newPassword+0x262>
	else if (__tmp > 65535)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	4f e7       	ldi	r20, 0x7F	; 127
    1336:	57 e4       	ldi	r21, 0x47	; 71
    1338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133c:	18 16       	cp	r1, r24
    133e:	4c f5       	brge	.+82     	; 0x1392 <App_newPassword+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	6b 85       	ldd	r22, Y+11	; 0x0b
    1342:	7c 85       	ldd	r23, Y+12	; 0x0c
    1344:	8d 85       	ldd	r24, Y+13	; 0x0d
    1346:	9e 85       	ldd	r25, Y+14	; 0x0e
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	51 e4       	ldi	r21, 0x41	; 65
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <App_newPassword+0x244>
    136a:	88 ec       	ldi	r24, 0xC8	; 200
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <App_newPassword+0x232>
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	69 f7       	brne	.-38     	; 0x136a <App_newPassword+0x226>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <App_newPassword+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	6f 81       	ldd	r22, Y+7	; 0x07
    1394:	78 85       	ldd	r23, Y+8	; 0x08
    1396:	89 85       	ldd	r24, Y+9	; 0x09
    1398:	9a 85       	ldd	r25, Y+10	; 0x0a
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <App_newPassword+0x26e>
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
    13ba:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
}   /* End App_newPassword()function */
    13be:	6d 96       	adiw	r28, 0x1d	; 29
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <App_getPassword>:

/* A function to take the password from the keypad and store it */
void App_getPassword(uint8*a_Password)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	62 97       	sbiw	r28, 0x12	; 18
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	9a 8b       	std	Y+18, r25	; 0x12
    13e6:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;

	for(i = 0; i < 5; i++)
    13e8:	18 8a       	std	Y+16, r1	; 0x10
    13ea:	9f c0       	rjmp	.+318    	; 0x152a <App_getPassword+0x15a>
	{
		key = Keypad_getPressedKey();
    13ec:	0e 94 8f 0b 	call	0x171e	; 0x171e <Keypad_getPressedKey>
    13f0:	8f 87       	std	Y+15, r24	; 0x0f

		if(key >= 0 && key <= 9)
    13f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f4:	8a 30       	cpi	r24, 0x0A	; 10
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <App_getPassword+0x2a>
    13f8:	89 c0       	rjmp	.+274    	; 0x150c <App_getPassword+0x13c>
		{
			a_Password[i] = key;
    13fa:	88 89       	ldd	r24, Y+16	; 0x10
    13fc:	28 2f       	mov	r18, r24
    13fe:	33 27       	eor	r19, r19
    1400:	27 fd       	sbrc	r18, 7
    1402:	30 95       	com	r19
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	9a 89       	ldd	r25, Y+18	; 0x12
    1408:	fc 01       	movw	r30, r24
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1410:	80 83       	st	Z, r24

			LCD_displayStringRowColumn(2, i+6, "*");   /* Display'*'to hide the password for security */
    1412:	88 89       	ldd	r24, Y+16	; 0x10
    1414:	98 2f       	mov	r25, r24
    1416:	9a 5f       	subi	r25, 0xFA	; 250
    1418:	22 ef       	ldi	r18, 0xF2	; 242
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	69 2f       	mov	r22, r25
    1420:	a9 01       	movw	r20, r18
    1422:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	aa ef       	ldi	r26, 0xFA	; 250
    142c:	b3 e4       	ldi	r27, 0x43	; 67
    142e:	8b 87       	std	Y+11, r24	; 0x0b
    1430:	9c 87       	std	Y+12, r25	; 0x0c
    1432:	ad 87       	std	Y+13, r26	; 0x0d
    1434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1436:	6b 85       	ldd	r22, Y+11	; 0x0b
    1438:	7c 85       	ldd	r23, Y+12	; 0x0c
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	9e 85       	ldd	r25, Y+14	; 0x0e
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	4a ef       	ldi	r20, 0xFA	; 250
    1444:	54 e4       	ldi	r21, 0x44	; 68
    1446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	8f 83       	std	Y+7, r24	; 0x07
    1450:	98 87       	std	Y+8, r25	; 0x08
    1452:	a9 87       	std	Y+9, r26	; 0x09
    1454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <App_getPassword+0xa8>
		__ticks = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <App_getPassword+0x126>
	else if (__tmp > 65535)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	4c f5       	brge	.+82     	; 0x14e2 <App_getPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	6b 85       	ldd	r22, Y+11	; 0x0b
    1492:	7c 85       	ldd	r23, Y+12	; 0x0c
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <App_getPassword+0x108>
    14ba:	88 ec       	ldi	r24, 0xC8	; 200
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <App_getPassword+0xf6>
    14ca:	9c 83       	std	Y+4, r25	; 0x04
    14cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	69 f7       	brne	.-38     	; 0x14ba <App_getPassword+0xea>
    14e0:	18 c0       	rjmp	.+48     	; 0x1512 <App_getPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <App_getPassword+0x132>
    1506:	9a 83       	std	Y+2, r25	; 0x02
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <App_getPassword+0x142>
			_delay_ms(500);                             /* Delay between keys which means accepting key every 0.5S */
		}   /* End if(key >= 0 && key <= 9) */
		else i--;   /* To Loop until the user enter a password */
    150c:	88 89       	ldd	r24, Y+16	; 0x10
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	88 8b       	std	Y+16, r24	; 0x10

		if(4 == i)
    1512:	88 89       	ldd	r24, Y+16	; 0x10
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	31 f4       	brne	.+12     	; 0x1524 <App_getPassword+0x154>
		{
			key = Keypad_getPressedKey();
    1518:	0e 94 8f 0b 	call	0x171e	; 0x171e <Keypad_getPressedKey>
    151c:	8f 87       	std	Y+15, r24	; 0x0f

			if(13 == key)break;               /* The user entered a 5 digits password */
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	8d 30       	cpi	r24, 0x0D	; 13
    1522:	39 f0       	breq	.+14     	; 0x1532 <App_getPassword+0x162>
void App_getPassword(uint8*a_Password)
{
	sint8 i;
	uint8 key;

	for(i = 0; i < 5; i++)
    1524:	88 89       	ldd	r24, Y+16	; 0x10
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	88 8b       	std	Y+16, r24	; 0x10
    152a:	88 89       	ldd	r24, Y+16	; 0x10
    152c:	85 30       	cpi	r24, 0x05	; 5
    152e:	0c f4       	brge	.+2      	; 0x1532 <App_getPassword+0x162>
    1530:	5d cf       	rjmp	.-326    	; 0x13ec <App_getPassword+0x1c>

		}   /* End if(4==i) */

	}   /* End for(i = 0; i< 5; i++) */

	a_Password[5] = '#';
    1532:	89 89       	ldd	r24, Y+17	; 0x11
    1534:	9a 89       	ldd	r25, Y+18	; 0x12
    1536:	fc 01       	movw	r30, r24
    1538:	35 96       	adiw	r30, 0x05	; 5
    153a:	83 e2       	ldi	r24, 0x23	; 35
    153c:	80 83       	st	Z, r24
	a_Password[6] = '\0';
    153e:	89 89       	ldd	r24, Y+17	; 0x11
    1540:	9a 89       	ldd	r25, Y+18	; 0x12
    1542:	fc 01       	movw	r30, r24
    1544:	36 96       	adiw	r30, 0x06	; 6
    1546:	10 82       	st	Z, r1

}   /* End App_getPassword()function */
    1548:	62 96       	adiw	r28, 0x12	; 18
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <App_mainOptions>:

/* A function to handle the application main options */
void App_mainOptions()
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	 *
	 * If he chose to change the password so ask him to enter the old password and store it in password array
	 * Send OLD_PW message to Control_MCU to check if this old PW is correct or wrong
	 * Wait the replay of Control_MCU which is either CORRECT_OLD_PW or WRONG_OLD_PW
	 */
	LCD_displayStringRowColumn(1, 1, "+ : Open Door   ");
    1562:	24 ef       	ldi	r18, 0xF4	; 244
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	a9 01       	movw	r20, r18
    156c:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 1, "- : Change Pass");
    1570:	25 e0       	ldi	r18, 0x05	; 5
    1572:	31 e0       	ldi	r19, 0x01	; 1
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	a9 01       	movw	r20, r18
    157a:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>

	while(1)
	{

		if('+' == Keypad_getPressedKey())
    157e:	0e 94 8f 0b 	call	0x171e	; 0x171e <Keypad_getPressedKey>
    1582:	8b 32       	cpi	r24, 0x2B	; 43
    1584:	09 f5       	brne	.+66     	; 0x15c8 <App_mainOptions+0x6e>
		{
			UART_sendByte(OPEN_DOOR);
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			LCD_clearScreen();
    158c:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>

			LCD_displayStringRowColumn(1, 1, "Door's unlocking");
    1590:	25 e1       	ldi	r18, 0x15	; 21
    1592:	31 e0       	ldi	r19, 0x01	; 1
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	a9 01       	movw	r20, r18
    159a:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_timerDelay(15);   /* Delay 15 seconds using timer1 */
    159e:	8f e0       	ldi	r24, 0x0F	; 15
    15a0:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <App_timerDelay>
			LCD_clearScreen();
    15a4:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>

			App_timerDelay(2);    /*Delay 2 second suing timer1 */
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <App_timerDelay>

			LCD_displayStringRowColumn(1, 1, "Door's locking   ");
    15ae:	26 e2       	ldi	r18, 0x26	; 38
    15b0:	31 e0       	ldi	r19, 0x01	; 1
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	a9 01       	movw	r20, r18
    15b8:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>
			App_timerDelay(15);   /* Delay 15 seconds again using timer1 */
    15bc:	8f e0       	ldi	r24, 0x0F	; 15
    15be:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <App_timerDelay>
			LCD_clearScreen();
    15c2:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
    15c6:	1c c0       	rjmp	.+56     	; 0x1600 <App_mainOptions+0xa6>

			break;   /* To break from the inner while(1) to execute the following application code */
		}   /* End if('+'==Keypad_getPressedKey()) */
		else if('-' == Keypad_getPressedKey())
    15c8:	0e 94 8f 0b 	call	0x171e	; 0x171e <Keypad_getPressedKey>
    15cc:	8d 32       	cpi	r24, 0x2D	; 45
    15ce:	b9 f6       	brne	.-82     	; 0x157e <App_mainOptions+0x24>
		{
			LCD_clearScreen();
    15d0:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_clearScreen>
			LCD_displayStringRowColumn(1,1,"Enter The old PW");
    15d4:	24 ea       	ldi	r18, 0xA4	; 164
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	a9 01       	movw	r20, r18
    15de:	0e 94 84 14 	call	0x2908	; 0x2908 <LCD_displayStringRowColumn>

			App_getPassword(Password);
    15e2:	8d e5       	ldi	r24, 0x5D	; 93
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <App_getPassword>
			UART_sendByte(OLD_PW);
    15ea:	89 e0       	ldi	r24, 0x09	; 9
    15ec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
			UART_sendString(Password);
    15f0:	8d e5       	ldi	r24, 0x5D	; 93
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <UART_sendString>

			while(2 == g_Control);
    15f8:	80 91 4f 01 	lds	r24, 0x014F
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	e1 f3       	breq	.-8      	; 0x15f8 <App_mainOptions+0x9e>

			break;   /* To break from the inner while(1) to execute the following application code */
		}   /* End if('-'==Keypad_getPressedKey()) */
	}   /* End while(1) */

}   /* End App_mainOptions()function */
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <App_receiveControl>:

/* A function to control the UART receive messages */
void App_receiveControl()
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	 *  of wrong try if it reached 3 then set g_Control to 4 to make its actions
	 * If CORRECT_OLD_PW is received then make g_Control=5 to allow the user to create an new PW
	 * IF WRONG_OLD_PW is received then make g_Control=6 to make the user enter it the old PW again
	 *  ,if he entered it 3 times wrong make g_Control=4 to make its actions
	 */
	if(CORRECT_PW == UART_receiveBuffer)
    160e:	80 91 6b 01 	lds	r24, 0x016B
    1612:	86 30       	cpi	r24, 0x06	; 6
    1614:	31 f4       	brne	.+12     	; 0x1622 <App_receiveControl+0x1c>
	{
		g_Control = 2;
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	80 93 4f 01 	sts	0x014F, r24
		wrongTry = 0;
    161c:	10 92 50 01 	sts	0x0150, r1
    1620:	33 c0       	rjmp	.+102    	; 0x1688 <App_receiveControl+0x82>
	}   /* End if(CORRECT_PW==UART_receiveBuffer) */
	else if(WRONG_PW == UART_receiveBuffer)
    1622:	80 91 6b 01 	lds	r24, 0x016B
    1626:	87 30       	cpi	r24, 0x07	; 7
    1628:	91 f4       	brne	.+36     	; 0x164e <App_receiveControl+0x48>
	{
		g_Control = 3;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	80 93 4f 01 	sts	0x014F, r24
		wrongTry++;
    1630:	80 91 50 01 	lds	r24, 0x0150
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	80 93 50 01 	sts	0x0150, r24

		if(3 == wrongTry)
    163a:	80 91 50 01 	lds	r24, 0x0150
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	19 f5       	brne	.+70     	; 0x1688 <App_receiveControl+0x82>
		{
			wrongTry = 0;
    1642:	10 92 50 01 	sts	0x0150, r1
			g_Control = 4;
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	80 93 4f 01 	sts	0x014F, r24
    164c:	1d c0       	rjmp	.+58     	; 0x1688 <App_receiveControl+0x82>
		}   /* End if(3==wrongTry) */

	}   /* End else if(WRONG_PW==UART_receiveBuffer) */
	else if(CORRECT_OLD_PW == UART_receiveBuffer)g_Control = 5;
    164e:	80 91 6b 01 	lds	r24, 0x016B
    1652:	8a 30       	cpi	r24, 0x0A	; 10
    1654:	21 f4       	brne	.+8      	; 0x165e <App_receiveControl+0x58>
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	80 93 4f 01 	sts	0x014F, r24
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <App_receiveControl+0x82>
	else if(WRONG_OLD_PW == UART_receiveBuffer)
    165e:	80 91 6b 01 	lds	r24, 0x016B
    1662:	8b 30       	cpi	r24, 0x0B	; 11
    1664:	89 f4       	brne	.+34     	; 0x1688 <App_receiveControl+0x82>
	{
		g_Control = 6;
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	80 93 4f 01 	sts	0x014F, r24
		wrongTry++;
    166c:	80 91 50 01 	lds	r24, 0x0150
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	80 93 50 01 	sts	0x0150, r24

		if(3 == wrongTry)
    1676:	80 91 50 01 	lds	r24, 0x0150
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	29 f4       	brne	.+10     	; 0x1688 <App_receiveControl+0x82>
		{
			wrongTry = 0;
    167e:	10 92 50 01 	sts	0x0150, r1
			g_Control = 4;
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	80 93 4f 01 	sts	0x014F, r24
		}   /* End if(3==wrongTry) */

	}   /* End else if(WRONG_OLD_PW==UART_receiveBuffer) */

}   /* End App_receiveControl()Function */
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <App_timer1>:

/* A function to control timer1 */
void App_timer1()
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	g_counter++;   /* increment the global counter flag with every interrupt */
    1696:	80 91 51 01 	lds	r24, 0x0151
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	80 93 51 01 	sts	0x0151, r24
}   /* End App_timer1()function */
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <App_timerDelay>:

/* A function to make a time delay using timer1 */
void App_timerDelay(uint8 delay)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	89 83       	std	Y+1, r24	; 0x01
	if(2 == delay)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	71 f4       	brne	.+28     	; 0x16d4 <App_timerDelay+0x2e>
	{
		Timer_init(&s_timer1Config);   /* initialize the timer module with the desired configuration */
    16b8:	80 e4       	ldi	r24, 0x40	; 64
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Timer_init>
		while(g_counter != 2);         /* wait until the global counter became 2 to make 2 seconds delay */
    16c0:	80 91 51 01 	lds	r24, 0x0151
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <App_timerDelay+0x1a>
		g_counter = 0;                 /* Reset the global counter */
    16c8:	10 92 51 01 	sts	0x0151, r1
		Timer_stop(TIMER1);            /* Stop the timer */
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 77 15 	call	0x2aee	; 0x2aee <Timer_stop>
    16d2:	21 c0       	rjmp	.+66     	; 0x1716 <App_timerDelay+0x70>
	}   /* End if(2==delay) */
	else if(15 == delay)
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	8f 30       	cpi	r24, 0x0F	; 15
    16d8:	71 f4       	brne	.+28     	; 0x16f6 <App_timerDelay+0x50>
	{
		Timer_init(&s_timer1Config);
    16da:	80 e4       	ldi	r24, 0x40	; 64
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Timer_init>
		while(g_counter != 15);   /* wait until the global counter became 15 to make 15 seconds delay */
    16e2:	80 91 51 01 	lds	r24, 0x0151
    16e6:	8f 30       	cpi	r24, 0x0F	; 15
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <App_timerDelay+0x3c>
		g_counter = 0;
    16ea:	10 92 51 01 	sts	0x0151, r1
		Timer_stop(TIMER1);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 77 15 	call	0x2aee	; 0x2aee <Timer_stop>
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <App_timerDelay+0x70>
	}   /* End else if(15==delay) */
	else if(60 == delay)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	8c 33       	cpi	r24, 0x3C	; 60
    16fa:	69 f4       	brne	.+26     	; 0x1716 <App_timerDelay+0x70>
	{
		Timer_init(&s_timer1Config);
    16fc:	80 e4       	ldi	r24, 0x40	; 64
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Timer_init>
		while(g_counter != 60);   /* wait until the global counter became 60 to make 1 minute delay */
    1704:	80 91 51 01 	lds	r24, 0x0151
    1708:	8c 33       	cpi	r24, 0x3C	; 60
    170a:	e1 f7       	brne	.-8      	; 0x1704 <App_timerDelay+0x5e>
		g_counter = 0;
    170c:	10 92 51 01 	sts	0x0151, r1
		Timer_stop(TIMER1);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 77 15 	call	0x2aee	; 0x2aee <Timer_stop>
	}   /* End else if(60==delay) */

}   /* End App_timerDelay()function */
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <Keypad_getPressedKey>:
#endif


/* Public functions definitions: */
uint8 Keypad_getPressedKey()
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <Keypad_getPressedKey+0x6>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;

	while(1)
	{

		for(col = 0; col < N_COL; col++ )
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	4c c0       	rjmp	.+152    	; 0x17c4 <Keypad_getPressedKey+0xa6>
			{
				KEYPAD_PORT_DIR = (0b00010000<<col);   /* Every col is output and the rest are inputs */
    172c:	e7 e3       	ldi	r30, 0x37	; 55
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	80 e1       	ldi	r24, 0x10	; 16
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <Keypad_getPressedKey+0x22>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	2a 95       	dec	r18
    1742:	e2 f7       	brpl	.-8      	; 0x173c <Keypad_getPressedKey+0x1e>
    1744:	80 83       	st	Z, r24

				/* one col is cleared every iteration and the rest  have internal pull up resistors */
			    KEYPAD_PORT = (~(0b00010000<<col));
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	80 e1       	ldi	r24, 0x10	; 16
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <Keypad_getPressedKey+0x3e>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <Keypad_getPressedKey+0x3a>
    1760:	80 95       	com	r24
    1762:	80 83       	st	Z, r24

				for(row = 0; row < N_ROW; row++)
    1764:	1a 82       	std	Y+2, r1	; 0x02
    1766:	28 c0       	rjmp	.+80     	; 0x17b8 <Keypad_getPressedKey+0x9a>
				{

					if(BIT_IS_CLEAR(KEYPAD_PIN,row))
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a9 01       	movw	r20, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <Keypad_getPressedKey+0x62>
    177c:	55 95       	asr	r21
    177e:	47 95       	ror	r20
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <Keypad_getPressedKey+0x5e>
    1784:	ca 01       	movw	r24, r20
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	91 f4       	brne	.+36     	; 0x17b2 <Keypad_getPressedKey+0x94>
					{

						#if(N_COL == 3)
		                   return Keypad_4x3_adjustSwitchNumber((row*N_COL)+col+1);
		                #elif(N_COL == 4)
		                   return Keypad_4x4_adjustSwitchNumber((row*N_COL)+col+1);
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	98 2f       	mov	r25, r24
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	89 0f       	add	r24, r25
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Keypad_4x4_adjustSwitchNumber>

			}   /* End for(col=0;col<N_COL;col++) */

	}   /* End while() */

 }   /* End Keypad_getPressedKey() function */
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret
				KEYPAD_PORT_DIR = (0b00010000<<col);   /* Every col is output and the rest are inputs */

				/* one col is cleared every iteration and the rest  have internal pull up resistors */
			    KEYPAD_PORT = (~(0b00010000<<col));

				for(row = 0; row < N_ROW; row++)
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	a8 f2       	brcs	.-86     	; 0x1768 <Keypad_getPressedKey+0x4a>
	uint8 row,col;

	while(1)
	{

		for(col = 0; col < N_COL; col++ )
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	84 30       	cpi	r24, 0x04	; 4
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <Keypad_getPressedKey+0xae>
    17ca:	b0 cf       	rjmp	.-160    	; 0x172c <Keypad_getPressedKey+0xe>
    17cc:	ad cf       	rjmp	.-166    	; 0x1728 <Keypad_getPressedKey+0xa>

000017ce <Keypad_4x4_adjustSwitchNumber>:
/*
 * A function to make the keypad fit it's 4x4
 * design in proteus
 */
static uint8 Keypad_4x4_adjustSwitchNumber(uint8 buttonNumber)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <Keypad_4x4_adjustSwitchNumber+0x6>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x8>
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01

	switch(buttonNumber)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3c 83       	std	Y+4, r19	; 0x04
    17e6:	2b 83       	std	Y+3, r18	; 0x03
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	88 30       	cpi	r24, 0x08	; 8
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <Keypad_4x4_adjustSwitchNumber+0x26>
    17f2:	70 c0       	rjmp	.+224    	; 0x18d4 <Keypad_4x4_adjustSwitchNumber+0x106>
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	29 30       	cpi	r18, 0x09	; 9
    17fa:	31 05       	cpc	r19, r1
    17fc:	5c f5       	brge	.+86     	; 0x1854 <Keypad_4x4_adjustSwitchNumber+0x86>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <Keypad_4x4_adjustSwitchNumber+0x3c>
    1808:	59 c0       	rjmp	.+178    	; 0x18bc <Keypad_4x4_adjustSwitchNumber+0xee>
    180a:	2b 81       	ldd	r18, Y+3	; 0x03
    180c:	3c 81       	ldd	r19, Y+4	; 0x04
    180e:	25 30       	cpi	r18, 0x05	; 5
    1810:	31 05       	cpc	r19, r1
    1812:	9c f4       	brge	.+38     	; 0x183a <Keypad_4x4_adjustSwitchNumber+0x6c>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <Keypad_4x4_adjustSwitchNumber+0x52>
    181e:	48 c0       	rjmp	.+144    	; 0x18b0 <Keypad_4x4_adjustSwitchNumber+0xe2>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	23 30       	cpi	r18, 0x03	; 3
    1826:	31 05       	cpc	r19, r1
    1828:	0c f0       	brlt	.+2      	; 0x182c <Keypad_4x4_adjustSwitchNumber+0x5e>
    182a:	45 c0       	rjmp	.+138    	; 0x18b6 <Keypad_4x4_adjustSwitchNumber+0xe8>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <Keypad_4x4_adjustSwitchNumber+0x6a>
    1836:	39 c0       	rjmp	.+114    	; 0x18aa <Keypad_4x4_adjustSwitchNumber+0xdc>
    1838:	67 c0       	rjmp	.+206    	; 0x1908 <Keypad_4x4_adjustSwitchNumber+0x13a>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	26 30       	cpi	r18, 0x06	; 6
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <Keypad_4x4_adjustSwitchNumber+0x78>
    1844:	41 c0       	rjmp	.+130    	; 0x18c8 <Keypad_4x4_adjustSwitchNumber+0xfa>
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	87 30       	cpi	r24, 0x07	; 7
    184c:	91 05       	cpc	r25, r1
    184e:	0c f0       	brlt	.+2      	; 0x1852 <Keypad_4x4_adjustSwitchNumber+0x84>
    1850:	3e c0       	rjmp	.+124    	; 0x18ce <Keypad_4x4_adjustSwitchNumber+0x100>
    1852:	37 c0       	rjmp	.+110    	; 0x18c2 <Keypad_4x4_adjustSwitchNumber+0xf4>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	2c 30       	cpi	r18, 0x0C	; 12
    185a:	31 05       	cpc	r19, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <Keypad_4x4_adjustSwitchNumber+0x92>
    185e:	46 c0       	rjmp	.+140    	; 0x18ec <Keypad_4x4_adjustSwitchNumber+0x11e>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	8d 30       	cpi	r24, 0x0D	; 13
    1866:	91 05       	cpc	r25, r1
    1868:	5c f4       	brge	.+22     	; 0x1880 <Keypad_4x4_adjustSwitchNumber+0xb2>
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	3c 81       	ldd	r19, Y+4	; 0x04
    186e:	2a 30       	cpi	r18, 0x0A	; 10
    1870:	31 05       	cpc	r19, r1
    1872:	b1 f1       	breq	.+108    	; 0x18e0 <Keypad_4x4_adjustSwitchNumber+0x112>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	8b 30       	cpi	r24, 0x0B	; 11
    187a:	91 05       	cpc	r25, r1
    187c:	a4 f5       	brge	.+104    	; 0x18e6 <Keypad_4x4_adjustSwitchNumber+0x118>
    187e:	2d c0       	rjmp	.+90     	; 0x18da <Keypad_4x4_adjustSwitchNumber+0x10c>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	2e 30       	cpi	r18, 0x0E	; 14
    1886:	31 05       	cpc	r19, r1
    1888:	b9 f1       	breq	.+110    	; 0x18f8 <Keypad_4x4_adjustSwitchNumber+0x12a>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	8e 30       	cpi	r24, 0x0E	; 14
    1890:	91 05       	cpc	r25, r1
    1892:	7c f1       	brlt	.+94     	; 0x18f2 <Keypad_4x4_adjustSwitchNumber+0x124>
    1894:	2b 81       	ldd	r18, Y+3	; 0x03
    1896:	3c 81       	ldd	r19, Y+4	; 0x04
    1898:	2f 30       	cpi	r18, 0x0F	; 15
    189a:	31 05       	cpc	r19, r1
    189c:	79 f1       	breq	.+94     	; 0x18fc <Keypad_4x4_adjustSwitchNumber+0x12e>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	91 05       	cpc	r25, r1
    18a6:	69 f1       	breq	.+90     	; 0x1902 <Keypad_4x4_adjustSwitchNumber+0x134>
    18a8:	2f c0       	rjmp	.+94     	; 0x1908 <Keypad_4x4_adjustSwitchNumber+0x13a>
	{
	   case 1:
		   return 7;
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	2d c0       	rjmp	.+90     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
		   break;
	   case 2:
		   return 8;
    18b0:	28 e0       	ldi	r18, 0x08	; 8
    18b2:	2a 83       	std	Y+2, r18	; 0x02
    18b4:	2a c0       	rjmp	.+84     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
		   break;
	    case 3:
		    return 9;
    18b6:	39 e0       	ldi	r19, 0x09	; 9
    18b8:	3a 83       	std	Y+2, r19	; 0x02
    18ba:	27 c0       	rjmp	.+78     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
		    break;
	    case 4:
	    	return'/';
    18bc:	8f e2       	ldi	r24, 0x2F	; 47
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	24 c0       	rjmp	.+72     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 5:
	    	return 4;
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	21 c0       	rjmp	.+66     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 6:
	    	return 5;
    18c8:	25 e0       	ldi	r18, 0x05	; 5
    18ca:	2a 83       	std	Y+2, r18	; 0x02
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 7:
	    	return 6;
    18ce:	36 e0       	ldi	r19, 0x06	; 6
    18d0:	3a 83       	std	Y+2, r19	; 0x02
    18d2:	1b c0       	rjmp	.+54     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 8:
	    	return'*';
    18d4:	8a e2       	ldi	r24, 0x2A	; 42
    18d6:	8a 83       	std	Y+2, r24	; 0x02
    18d8:	18 c0       	rjmp	.+48     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 9:
	    	return 1;
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	15 c0       	rjmp	.+42     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 10:
	    	return 2;
    18e0:	22 e0       	ldi	r18, 0x02	; 2
    18e2:	2a 83       	std	Y+2, r18	; 0x02
    18e4:	12 c0       	rjmp	.+36     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 11:
	    	return 3;
    18e6:	33 e0       	ldi	r19, 0x03	; 3
    18e8:	3a 83       	std	Y+2, r19	; 0x02
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 12:
	    	return'-';
    18ec:	8d e2       	ldi	r24, 0x2D	; 45
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 13:
	    	return 13;
    18f2:	9d e0       	ldi	r25, 0x0D	; 13
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 14:
	    	return 0;
    18f8:	1a 82       	std	Y+2, r1	; 0x02
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 15:
	    	return'=';
    18fc:	2d e3       	ldi	r18, 0x3D	; 61
    18fe:	2a 83       	std	Y+2, r18	; 0x02
    1900:	04 c0       	rjmp	.+8      	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
	    	break;
	    case 16:
	    	return '+';
    1902:	3b e2       	ldi	r19, 0x2B	; 43
    1904:	3a 83       	std	Y+2, r19	; 0x02
    1906:	01 c0       	rjmp	.+2      	; 0x190a <Keypad_4x4_adjustSwitchNumber+0x13c>
    1908:	02 c0       	rjmp	.+4      	; 0x190e <Keypad_4x4_adjustSwitchNumber+0x140>
	    	break;
	}   /* End switch */

}   /* End Keypad_4x4_adjustSwitchNumber() function */
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <LCD_init>:

#include"LCD.h"

/*LCD initialization:*/
void LCD_init()
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	LCD_CONTROL_PORT_DIRECTION |= (1<<RS) | (1<<RW) |(1<<E);   /*RS,RW and E are outputs*/
    1928:	a4 e3       	ldi	r26, 0x34	; 52
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e4 e3       	ldi	r30, 0x34	; 52
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	87 60       	ori	r24, 0x07	; 7
    1934:	8c 93       	st	X, r24
	   #endif

	   LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE);

	#elif(DATA_BITS_MODE == 8)
		 LCD_DATA_PORT_DIRECTION = 0xFF;   /* The data Port is output */
    1936:	ea e3       	ldi	r30, 0x3A	; 58
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	80 83       	st	Z, r24
		 LCD_sendCommand(TWO_LINES_EIGHT_BITS_MODE);
    193e:	88 e3       	ldi	r24, 0x38	; 56
    1940:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_sendCommand>
	#endif

	LCD_sendCommand(LCD_CLEAR );   /*Clear display*/
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    194a:	8c e0       	ldi	r24, 0x0C	; 12
    194c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_sendCommand>
 }   /*End LCD_init function*/
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LCD_sendCommand>:

/*A function to send LCD commands:*/
void LCD_sendCommand(uint8 command)
{
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	c1 56       	subi	r28, 0x61	; 97
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	fe 01       	movw	r30, r28
    1972:	ef 59       	subi	r30, 0x9F	; 159
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CONTROL_PORT,RS);   /*RS=0 to select command register*/
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e5 e3       	ldi	r30, 0x35	; 53
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT,RW);   /*RW=0 to write on data path*/
    1986:	a5 e3       	ldi	r26, 0x35	; 53
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8d 7f       	andi	r24, 0xFD	; 253
    1992:	8c 93       	st	X, r24
    1994:	fe 01       	movw	r30, r28
    1996:	e3 5a       	subi	r30, 0xA3	; 163
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19aa:	8e 01       	movw	r16, r28
    19ac:	07 5a       	subi	r16, 0xA7	; 167
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e3 5a       	subi	r30, 0xA3	; 163
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	2b ea       	ldi	r18, 0xAB	; 171
    19c0:	3a ea       	ldi	r19, 0xAA	; 170
    19c2:	4a e2       	ldi	r20, 0x2A	; 42
    19c4:	50 e4       	ldi	r21, 0x40	; 64
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 5a       	subi	r30, 0xA7	; 167
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	34 f4       	brge	.+12     	; 0x1a02 <LCD_sendCommand+0xac>
		__ticks = 1;
    19f6:	fe 01       	movw	r30, r28
    19f8:	e8 5a       	subi	r30, 0xA8	; 168
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 83       	st	Z, r24
    1a00:	e0 c0       	rjmp	.+448    	; 0x1bc2 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    1a02:	fe 01       	movw	r30, r28
    1a04:	e7 5a       	subi	r30, 0xA7	; 167
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	53 e4       	ldi	r21, 0x43	; 67
    1a18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <LCD_sendCommand+0xcc>
    1a20:	c0 c0       	rjmp	.+384    	; 0x1ba2 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    1a22:	fe 01       	movw	r30, r28
    1a24:	e3 5a       	subi	r30, 0xA3	; 163
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a e7       	ldi	r20, 0x7A	; 122
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	fe 01       	movw	r30, r28
    1a42:	ec 5a       	subi	r30, 0xAC	; 172
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 83       	st	Z, r24
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	a2 83       	std	Z+2, r26	; 0x02
    1a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	8e 01       	movw	r16, r28
    1a50:	00 5b       	subi	r16, 0xB0	; 176
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	fe 01       	movw	r30, r28
    1a56:	ec 5a       	subi	r30, 0xAC	; 172
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	f8 01       	movw	r30, r16
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	a2 83       	std	Z+2, r26	; 0x02
    1a7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e0 5b       	subi	r30, 0xB0	; 176
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	44 f4       	brge	.+16     	; 0x1aaa <LCD_sendCommand+0x154>
		__ticks = 1;
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e2 5b       	subi	r30, 0xB2	; 178
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	64 c0       	rjmp	.+200    	; 0x1b72 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e0 5b       	subi	r30, 0xB0	; 176
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	0c f0       	brlt	.+2      	; 0x1aca <LCD_sendCommand+0x174>
    1ac8:	43 c0       	rjmp	.+134    	; 0x1b50 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	fe 01       	movw	r30, r28
    1acc:	ec 5a       	subi	r30, 0xAC	; 172
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8e 01       	movw	r16, r28
    1aea:	02 5b       	subi	r16, 0xB2	; 178
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	f8 01       	movw	r30, r16
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    1b00:	1f c0       	rjmp	.+62     	; 0x1b40 <LCD_sendCommand+0x1ea>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e4 5b       	subi	r30, 0xB4	; 180
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	88 ec       	ldi	r24, 0xC8	; 200
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	fe 01       	movw	r30, r28
    1b12:	e4 5b       	subi	r30, 0xB4	; 180
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_sendCommand+0x1c4>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e4 5b       	subi	r30, 0xB4	; 180
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	de 01       	movw	r26, r28
    1b2a:	a2 5b       	subi	r26, 0xB2	; 178
    1b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e2 5b       	subi	r30, 0xB2	; 178
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e2 5b       	subi	r30, 0xB2	; 178
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	d1 f6       	brne	.-76     	; 0x1b02 <LCD_sendCommand+0x1ac>
    1b4e:	4b c0       	rjmp	.+150    	; 0x1be6 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	8e 01       	movw	r16, r28
    1b52:	02 5b       	subi	r16, 0xB2	; 178
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	e0 5b       	subi	r30, 0xB0	; 176
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	de 01       	movw	r26, r28
    1b74:	a6 5b       	subi	r26, 0xB6	; 182
    1b76:	bf 4f       	sbci	r27, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e2 5b       	subi	r30, 0xB2	; 178
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	9c 93       	st	X, r25
    1b86:	8e 93       	st	-X, r24
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e6 5b       	subi	r30, 0xB6	; 182
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_sendCommand+0x23c>
    1b96:	fe 01       	movw	r30, r28
    1b98:	e6 5b       	subi	r30, 0xB6	; 182
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
    1ba0:	22 c0       	rjmp	.+68     	; 0x1be6 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba2:	8e 01       	movw	r16, r28
    1ba4:	08 5a       	subi	r16, 0xA8	; 168
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e7 5a       	subi	r30, 0xA7	; 167
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	80 83       	st	Z, r24
    1bc2:	de 01       	movw	r26, r28
    1bc4:	a7 5b       	subi	r26, 0xB7	; 183
    1bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e8 5a       	subi	r30, 0xA8	; 168
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e7 5b       	subi	r30, 0xB7	; 183
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	8a 95       	dec	r24
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_sendCommand+0x284>
    1bde:	fe 01       	movw	r30, r28
    1be0:	e7 5b       	subi	r30, 0xB7	; 183
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 83       	st	Z, r24
	_delay_us(1);                     /*tas=50ns from LCD timing diagram*/
	SET_BIT(LCD_CONTROL_PORT,E);      /*E=1 to enable LCD*/
    1be6:	a5 e3       	ldi	r26, 0x35	; 53
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e3       	ldi	r30, 0x35	; 53
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	84 60       	ori	r24, 0x04	; 4
    1bf2:	8c 93       	st	X, r24
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	eb 5b       	subi	r30, 0xBB	; 187
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a0 e8       	ldi	r26, 0x80	; 128
    1c00:	bf e3       	ldi	r27, 0x3F	; 63
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	0f 5b       	subi	r16, 0xBF	; 191
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	fe 01       	movw	r30, r28
    1c12:	eb 5b       	subi	r30, 0xBB	; 187
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	2b ea       	ldi	r18, 0xAB	; 171
    1c20:	3a ea       	ldi	r19, 0xAA	; 170
    1c22:	4a e2       	ldi	r20, 0x2A	; 42
    1c24:	50 e4       	ldi	r21, 0x40	; 64
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ef 5b       	subi	r30, 0xBF	; 191
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	34 f4       	brge	.+12     	; 0x1c62 <LCD_sendCommand+0x30c>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e0 5c       	subi	r30, 0xC0	; 192
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 83       	st	Z, r24
    1c60:	9d c0       	rjmp	.+314    	; 0x1d9c <LCD_sendCommand+0x446>
	else if (__tmp > 255)
    1c62:	fe 01       	movw	r30, r28
    1c64:	ef 5b       	subi	r30, 0xBF	; 191
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	53 e4       	ldi	r21, 0x43	; 67
    1c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	0c f0       	brlt	.+2      	; 0x1c82 <LCD_sendCommand+0x32c>
    1c80:	7e c0       	rjmp	.+252    	; 0x1d7e <LCD_sendCommand+0x428>
	{
		_delay_ms(__us / 1000.0);
    1c82:	fe 01       	movw	r30, r28
    1c84:	eb 5b       	subi	r30, 0xBB	; 187
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a e7       	ldi	r20, 0x7A	; 122
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8c af       	std	Y+60, r24	; 0x3c
    1ca2:	9d af       	std	Y+61, r25	; 0x3d
    1ca4:	ae af       	std	Y+62, r26	; 0x3e
    1ca6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1caa:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cac:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	4a ef       	ldi	r20, 0xFA	; 250
    1cb6:	54 e4       	ldi	r21, 0x44	; 68
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	88 af       	std	Y+56, r24	; 0x38
    1cc2:	99 af       	std	Y+57, r25	; 0x39
    1cc4:	aa af       	std	Y+58, r26	; 0x3a
    1cc6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1cc8:	68 ad       	ldd	r22, Y+56	; 0x38
    1cca:	79 ad       	ldd	r23, Y+57	; 0x39
    1ccc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cce:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f e3       	ldi	r21, 0x3F	; 63
    1cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cdc:	88 23       	and	r24, r24
    1cde:	2c f4       	brge	.+10     	; 0x1cea <LCD_sendCommand+0x394>
		__ticks = 1;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9f ab       	std	Y+55, r25	; 0x37
    1ce6:	8e ab       	std	Y+54, r24	; 0x36
    1ce8:	3f c0       	rjmp	.+126    	; 0x1d68 <LCD_sendCommand+0x412>
	else if (__tmp > 65535)
    1cea:	68 ad       	ldd	r22, Y+56	; 0x38
    1cec:	79 ad       	ldd	r23, Y+57	; 0x39
    1cee:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cf0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	4c f5       	brge	.+82     	; 0x1d54 <LCD_sendCommand+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d02:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d04:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e2       	ldi	r20, 0x20	; 32
    1d10:	51 e4       	ldi	r21, 0x41	; 65
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9f ab       	std	Y+55, r25	; 0x37
    1d28:	8e ab       	std	Y+54, r24	; 0x36
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <LCD_sendCommand+0x3f4>
    1d2c:	88 ec       	ldi	r24, 0xC8	; 200
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9d ab       	std	Y+53, r25	; 0x35
    1d32:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d34:	8c a9       	ldd	r24, Y+52	; 0x34
    1d36:	9d a9       	ldd	r25, Y+53	; 0x35
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_sendCommand+0x3e2>
    1d3c:	9d ab       	std	Y+53, r25	; 0x35
    1d3e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d40:	8e a9       	ldd	r24, Y+54	; 0x36
    1d42:	9f a9       	ldd	r25, Y+55	; 0x37
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	9f ab       	std	Y+55, r25	; 0x37
    1d48:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4a:	8e a9       	ldd	r24, Y+54	; 0x36
    1d4c:	9f a9       	ldd	r25, Y+55	; 0x37
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	69 f7       	brne	.-38     	; 0x1d2c <LCD_sendCommand+0x3d6>
    1d52:	2d c0       	rjmp	.+90     	; 0x1dae <LCD_sendCommand+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d54:	68 ad       	ldd	r22, Y+56	; 0x38
    1d56:	79 ad       	ldd	r23, Y+57	; 0x39
    1d58:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9f ab       	std	Y+55, r25	; 0x37
    1d66:	8e ab       	std	Y+54, r24	; 0x36
    1d68:	8e a9       	ldd	r24, Y+54	; 0x36
    1d6a:	9f a9       	ldd	r25, Y+55	; 0x37
    1d6c:	9b ab       	std	Y+51, r25	; 0x33
    1d6e:	8a ab       	std	Y+50, r24	; 0x32
    1d70:	8a a9       	ldd	r24, Y+50	; 0x32
    1d72:	9b a9       	ldd	r25, Y+51	; 0x33
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <LCD_sendCommand+0x41e>
    1d78:	9b ab       	std	Y+51, r25	; 0x33
    1d7a:	8a ab       	std	Y+50, r24	; 0x32
    1d7c:	18 c0       	rjmp	.+48     	; 0x1dae <LCD_sendCommand+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ef 5b       	subi	r30, 0xBF	; 191
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	fe 01       	movw	r30, r28
    1d96:	e0 5c       	subi	r30, 0xC0	; 192
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e0 5c       	subi	r30, 0xC0	; 192
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da6:	89 a9       	ldd	r24, Y+49	; 0x31
    1da8:	8a 95       	dec	r24
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_sendCommand+0x452>
    1dac:	89 ab       	std	Y+49, r24	; 0x31

	_delay_us(1);                 /*tdsw=100ns*/
	CLEAR_BIT(LCD_CONTROL_PORT,E);   /* disable LCD E=0 */
	_delay_us(1);                 /*tah=13ns*/
   #elif(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command;      /*Send command on data path*/
    1dae:	ab e3       	ldi	r26, 0x3B	; 59
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 59       	subi	r30, 0x9F	; 159
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	8c 93       	st	X, r24
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e8       	ldi	r26, 0x80	; 128
    1dc2:	bf e3       	ldi	r27, 0x3F	; 63
    1dc4:	8d a7       	std	Y+45, r24	; 0x2d
    1dc6:	9e a7       	std	Y+46, r25	; 0x2e
    1dc8:	af a7       	std	Y+47, r26	; 0x2f
    1dca:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dcc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dce:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd4:	2b ea       	ldi	r18, 0xAB	; 171
    1dd6:	3a ea       	ldi	r19, 0xAA	; 170
    1dd8:	4a e2       	ldi	r20, 0x2A	; 42
    1dda:	50 e4       	ldi	r21, 0x40	; 64
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	89 a7       	std	Y+41, r24	; 0x29
    1de6:	9a a7       	std	Y+42, r25	; 0x2a
    1de8:	ab a7       	std	Y+43, r26	; 0x2b
    1dea:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1dec:	69 a5       	ldd	r22, Y+41	; 0x29
    1dee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1df0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1df2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	1c f4       	brge	.+6      	; 0x1e0a <LCD_sendCommand+0x4b4>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	88 a7       	std	Y+40, r24	; 0x28
    1e08:	91 c0       	rjmp	.+290    	; 0x1f2c <LCD_sendCommand+0x5d6>
	else if (__tmp > 255)
    1e0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1e0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	53 e4       	ldi	r21, 0x43	; 67
    1e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	0c f0       	brlt	.+2      	; 0x1e24 <LCD_sendCommand+0x4ce>
    1e22:	7b c0       	rjmp	.+246    	; 0x1f1a <LCD_sendCommand+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    1e24:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e26:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8c a3       	std	Y+36, r24	; 0x24
    1e3e:	9d a3       	std	Y+37, r25	; 0x25
    1e40:	ae a3       	std	Y+38, r26	; 0x26
    1e42:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6c a1       	ldd	r22, Y+36	; 0x24
    1e46:	7d a1       	ldd	r23, Y+37	; 0x25
    1e48:	8e a1       	ldd	r24, Y+38	; 0x26
    1e4a:	9f a1       	ldd	r25, Y+39	; 0x27
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	88 a3       	std	Y+32, r24	; 0x20
    1e5e:	99 a3       	std	Y+33, r25	; 0x21
    1e60:	aa a3       	std	Y+34, r26	; 0x22
    1e62:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e64:	68 a1       	ldd	r22, Y+32	; 0x20
    1e66:	79 a1       	ldd	r23, Y+33	; 0x21
    1e68:	8a a1       	ldd	r24, Y+34	; 0x22
    1e6a:	9b a1       	ldd	r25, Y+35	; 0x23
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_sendCommand+0x530>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9f 8f       	std	Y+31, r25	; 0x1f
    1e82:	8e 8f       	std	Y+30, r24	; 0x1e
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_sendCommand+0x5ae>
	else if (__tmp > 65535)
    1e86:	68 a1       	ldd	r22, Y+32	; 0x20
    1e88:	79 a1       	ldd	r23, Y+33	; 0x21
    1e8a:	8a a1       	ldd	r24, Y+34	; 0x22
    1e8c:	9b a1       	ldd	r25, Y+35	; 0x23
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_sendCommand+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6c a1       	ldd	r22, Y+36	; 0x24
    1ea0:	7d a1       	ldd	r23, Y+37	; 0x25
    1ea2:	8e a1       	ldd	r24, Y+38	; 0x26
    1ea4:	9f a1       	ldd	r25, Y+39	; 0x27
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ec4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_sendCommand+0x590>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ece:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_sendCommand+0x57e>
    1ed8:	9d 8f       	std	Y+29, r25	; 0x1d
    1eda:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ede:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ee8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_sendCommand+0x572>
    1eee:	24 c0       	rjmp	.+72     	; 0x1f38 <LCD_sendCommand+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9f 8f       	std	Y+31, r25	; 0x1f
    1f02:	8e 8f       	std	Y+30, r24	; 0x1e
    1f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f08:	9b 8f       	std	Y+27, r25	; 0x1b
    1f0a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_sendCommand+0x5ba>
    1f14:	9b 8f       	std	Y+27, r25	; 0x1b
    1f16:	8a 8f       	std	Y+26, r24	; 0x1a
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_sendCommand+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f1a:	69 a5       	ldd	r22, Y+41	; 0x29
    1f1c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	88 a7       	std	Y+40, r24	; 0x28
    1f2c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f2e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f30:	89 8d       	ldd	r24, Y+25	; 0x19
    1f32:	8a 95       	dec	r24
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x5dc>
    1f36:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);                 /*tdsw=100ns*/
	CLEAR_BIT(LCD_CONTROL_PORT,E);
    1f38:	a5 e3       	ldi	r26, 0x35	; 53
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e5 e3       	ldi	r30, 0x35	; 53
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8b 7f       	andi	r24, 0xFB	; 251
    1f44:	8c 93       	st	X, r24
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e8       	ldi	r26, 0x80	; 128
    1f4c:	bf e3       	ldi	r27, 0x3F	; 63
    1f4e:	8d 8b       	std	Y+21, r24	; 0x15
    1f50:	9e 8b       	std	Y+22, r25	; 0x16
    1f52:	af 8b       	std	Y+23, r26	; 0x17
    1f54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f56:	6d 89       	ldd	r22, Y+21	; 0x15
    1f58:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5e:	2b ea       	ldi	r18, 0xAB	; 171
    1f60:	3a ea       	ldi	r19, 0xAA	; 170
    1f62:	4a e2       	ldi	r20, 0x2A	; 42
    1f64:	50 e4       	ldi	r21, 0x40	; 64
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	ab 8b       	std	Y+19, r26	; 0x13
    1f74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f76:	69 89       	ldd	r22, Y+17	; 0x11
    1f78:	7a 89       	ldd	r23, Y+18	; 0x12
    1f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	1c f4       	brge	.+6      	; 0x1f94 <LCD_sendCommand+0x63e>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	88 8b       	std	Y+16, r24	; 0x10
    1f92:	91 c0       	rjmp	.+290    	; 0x20b6 <LCD_sendCommand+0x760>
	else if (__tmp > 255)
    1f94:	69 89       	ldd	r22, Y+17	; 0x11
    1f96:	7a 89       	ldd	r23, Y+18	; 0x12
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	53 e4       	ldi	r21, 0x43	; 67
    1fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	0c f0       	brlt	.+2      	; 0x1fae <LCD_sendCommand+0x658>
    1fac:	7b c0       	rjmp	.+246    	; 0x20a4 <LCD_sendCommand+0x74e>
	{
		_delay_ms(__us / 1000.0);
    1fae:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8c 87       	std	Y+12, r24	; 0x0c
    1fc8:	9d 87       	std	Y+13, r25	; 0x0d
    1fca:	ae 87       	std	Y+14, r26	; 0x0e
    1fcc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fd0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a ef       	ldi	r20, 0xFA	; 250
    1fdc:	54 e4       	ldi	r21, 0x44	; 68
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	88 87       	std	Y+8, r24	; 0x08
    1fe8:	99 87       	std	Y+9, r25	; 0x09
    1fea:	aa 87       	std	Y+10, r26	; 0x0a
    1fec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fee:	68 85       	ldd	r22, Y+8	; 0x08
    1ff0:	79 85       	ldd	r23, Y+9	; 0x09
    1ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_sendCommand+0x6ba>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9f 83       	std	Y+7, r25	; 0x07
    200c:	8e 83       	std	Y+6, r24	; 0x06
    200e:	3f c0       	rjmp	.+126    	; 0x208e <LCD_sendCommand+0x738>
	else if (__tmp > 65535)
    2010:	68 85       	ldd	r22, Y+8	; 0x08
    2012:	79 85       	ldd	r23, Y+9	; 0x09
    2014:	8a 85       	ldd	r24, Y+10	; 0x0a
    2016:	9b 85       	ldd	r25, Y+11	; 0x0b
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <LCD_sendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6c 85       	ldd	r22, Y+12	; 0x0c
    202a:	7d 85       	ldd	r23, Y+13	; 0x0d
    202c:	8e 85       	ldd	r24, Y+14	; 0x0e
    202e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9f 83       	std	Y+7, r25	; 0x07
    204e:	8e 83       	std	Y+6, r24	; 0x06
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_sendCommand+0x71a>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9d 83       	std	Y+5, r25	; 0x05
    2058:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_sendCommand+0x708>
    2062:	9d 83       	std	Y+5, r25	; 0x05
    2064:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9f 83       	std	Y+7, r25	; 0x07
    206e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	8e 81       	ldd	r24, Y+6	; 0x06
    2072:	9f 81       	ldd	r25, Y+7	; 0x07
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <LCD_sendCommand+0x6fc>
    2078:	24 c0       	rjmp	.+72     	; 0x20c2 <LCD_sendCommand+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	68 85       	ldd	r22, Y+8	; 0x08
    207c:	79 85       	ldd	r23, Y+9	; 0x09
    207e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2080:	9b 85       	ldd	r25, Y+11	; 0x0b
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9f 83       	std	Y+7, r25	; 0x07
    208c:	8e 83       	std	Y+6, r24	; 0x06
    208e:	8e 81       	ldd	r24, Y+6	; 0x06
    2090:	9f 81       	ldd	r25, Y+7	; 0x07
    2092:	9b 83       	std	Y+3, r25	; 0x03
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_sendCommand+0x744>
    209e:	9b 83       	std	Y+3, r25	; 0x03
    20a0:	8a 83       	std	Y+2, r24	; 0x02
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_sendCommand+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20a4:	69 89       	ldd	r22, Y+17	; 0x11
    20a6:	7a 89       	ldd	r23, Y+18	; 0x12
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	9c 89       	ldd	r25, Y+20	; 0x14
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	88 8b       	std	Y+16, r24	; 0x10
    20b6:	88 89       	ldd	r24, Y+16	; 0x10
    20b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	8a 95       	dec	r24
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_sendCommand+0x766>
    20c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);   /*tah=13ns*/
   #endif
 }   /*End LCD_SendCommand function*/
    20c2:	cf 59       	subi	r28, 0x9F	; 159
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	08 95       	ret

000020da <LCD_displayCharacter>:

/*A function to display character on LCD:*/
void LCD_displayCharacter(uint8 chr)
{
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	c1 56       	subi	r28, 0x61	; 97
    20e8:	d0 40       	sbci	r29, 0x00	; 0
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	fe 01       	movw	r30, r28
    20f6:	ef 59       	subi	r30, 0x9F	; 159
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 83       	st	Z, r24
	SET_BIT(LCD_CONTROL_PORT,RS);   /*RS=0 to select command register*/
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	81 60       	ori	r24, 0x01	; 1
    2108:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT,RW);   /*RW=0 to write on data path*/
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8d 7f       	andi	r24, 0xFD	; 253
    2116:	8c 93       	st	X, r24
    2118:	fe 01       	movw	r30, r28
    211a:	e3 5a       	subi	r30, 0xA3	; 163
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e8       	ldi	r26, 0x80	; 128
    2124:	bf e3       	ldi	r27, 0x3F	; 63
    2126:	80 83       	st	Z, r24
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	a2 83       	std	Z+2, r26	; 0x02
    212c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    212e:	8e 01       	movw	r16, r28
    2130:	07 5a       	subi	r16, 0xA7	; 167
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	fe 01       	movw	r30, r28
    2136:	e3 5a       	subi	r30, 0xA3	; 163
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	2b ea       	ldi	r18, 0xAB	; 171
    2144:	3a ea       	ldi	r19, 0xAA	; 170
    2146:	4a e2       	ldi	r20, 0x2A	; 42
    2148:	50 e4       	ldi	r21, 0x40	; 64
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	f8 01       	movw	r30, r16
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    215c:	fe 01       	movw	r30, r28
    215e:	e7 5a       	subi	r30, 0xA7	; 167
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	34 f4       	brge	.+12     	; 0x2186 <LCD_displayCharacter+0xac>
		__ticks = 1;
    217a:	fe 01       	movw	r30, r28
    217c:	e8 5a       	subi	r30, 0xA8	; 168
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 83       	st	Z, r24
    2184:	e0 c0       	rjmp	.+448    	; 0x2346 <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    2186:	fe 01       	movw	r30, r28
    2188:	e7 5a       	subi	r30, 0xA7	; 167
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	53 e4       	ldi	r21, 0x43	; 67
    219c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	0c f0       	brlt	.+2      	; 0x21a6 <LCD_displayCharacter+0xcc>
    21a4:	c0 c0       	rjmp	.+384    	; 0x2326 <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    21a6:	fe 01       	movw	r30, r28
    21a8:	e3 5a       	subi	r30, 0xA3	; 163
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a e7       	ldi	r20, 0x7A	; 122
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	fe 01       	movw	r30, r28
    21c6:	ec 5a       	subi	r30, 0xAC	; 172
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 83       	st	Z, r24
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	a2 83       	std	Z+2, r26	; 0x02
    21d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	8e 01       	movw	r16, r28
    21d4:	00 5b       	subi	r16, 0xB0	; 176
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	fe 01       	movw	r30, r28
    21da:	ec 5a       	subi	r30, 0xAC	; 172
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a ef       	ldi	r20, 0xFA	; 250
    21ec:	54 e4       	ldi	r21, 0x44	; 68
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	f8 01       	movw	r30, r16
    21f8:	80 83       	st	Z, r24
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	a2 83       	std	Z+2, r26	; 0x02
    21fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2200:	fe 01       	movw	r30, r28
    2202:	e0 5b       	subi	r30, 0xB0	; 176
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	44 f4       	brge	.+16     	; 0x222e <LCD_displayCharacter+0x154>
		__ticks = 1;
    221e:	fe 01       	movw	r30, r28
    2220:	e2 5b       	subi	r30, 0xB2	; 178
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	64 c0       	rjmp	.+200    	; 0x22f6 <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    222e:	fe 01       	movw	r30, r28
    2230:	e0 5b       	subi	r30, 0xB0	; 176
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <LCD_displayCharacter+0x174>
    224c:	43 c0       	rjmp	.+134    	; 0x22d4 <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	fe 01       	movw	r30, r28
    2250:	ec 5a       	subi	r30, 0xAC	; 172
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e2       	ldi	r20, 0x20	; 32
    2262:	51 e4       	ldi	r21, 0x41	; 65
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8e 01       	movw	r16, r28
    226e:	02 5b       	subi	r16, 0xB2	; 178
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	f8 01       	movw	r30, r16
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	1f c0       	rjmp	.+62     	; 0x22c4 <LCD_displayCharacter+0x1ea>
    2286:	fe 01       	movw	r30, r28
    2288:	e4 5b       	subi	r30, 0xB4	; 180
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2294:	fe 01       	movw	r30, r28
    2296:	e4 5b       	subi	r30, 0xB4	; 180
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_displayCharacter+0x1c4>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e4 5b       	subi	r30, 0xB4	; 180
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	de 01       	movw	r26, r28
    22ae:	a2 5b       	subi	r26, 0xB2	; 178
    22b0:	bf 4f       	sbci	r27, 0xFF	; 255
    22b2:	fe 01       	movw	r30, r28
    22b4:	e2 5b       	subi	r30, 0xB2	; 178
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	11 96       	adiw	r26, 0x01	; 1
    22c0:	9c 93       	st	X, r25
    22c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	fe 01       	movw	r30, r28
    22c6:	e2 5b       	subi	r30, 0xB2	; 178
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	d1 f6       	brne	.-76     	; 0x2286 <LCD_displayCharacter+0x1ac>
    22d2:	4b c0       	rjmp	.+150    	; 0x236a <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	8e 01       	movw	r16, r28
    22d6:	02 5b       	subi	r16, 0xB2	; 178
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e0 5b       	subi	r30, 0xB0	; 176
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	f8 01       	movw	r30, r16
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	de 01       	movw	r26, r28
    22f8:	a6 5b       	subi	r26, 0xB6	; 182
    22fa:	bf 4f       	sbci	r27, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	e2 5b       	subi	r30, 0xB2	; 178
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	9c 93       	st	X, r25
    230a:	8e 93       	st	-X, r24
    230c:	fe 01       	movw	r30, r28
    230e:	e6 5b       	subi	r30, 0xB6	; 182
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_displayCharacter+0x23c>
    231a:	fe 01       	movw	r30, r28
    231c:	e6 5b       	subi	r30, 0xB6	; 182
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
    2324:	22 c0       	rjmp	.+68     	; 0x236a <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2326:	8e 01       	movw	r16, r28
    2328:	08 5a       	subi	r16, 0xA8	; 168
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	fe 01       	movw	r30, r28
    232e:	e7 5a       	subi	r30, 0xA7	; 167
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	80 83       	st	Z, r24
    2346:	de 01       	movw	r26, r28
    2348:	a7 5b       	subi	r26, 0xB7	; 183
    234a:	bf 4f       	sbci	r27, 0xFF	; 255
    234c:	fe 01       	movw	r30, r28
    234e:	e8 5a       	subi	r30, 0xA8	; 168
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2356:	fe 01       	movw	r30, r28
    2358:	e7 5b       	subi	r30, 0xB7	; 183
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	8a 95       	dec	r24
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_displayCharacter+0x284>
    2362:	fe 01       	movw	r30, r28
    2364:	e7 5b       	subi	r30, 0xB7	; 183
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 83       	st	Z, r24
	_delay_us(1);                     /*tas=50ns from LCD timing diagram*/
	SET_BIT(LCD_CONTROL_PORT,E);
    236a:	a5 e3       	ldi	r26, 0x35	; 53
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e5 e3       	ldi	r30, 0x35	; 53
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	84 60       	ori	r24, 0x04	; 4
    2376:	8c 93       	st	X, r24
    2378:	fe 01       	movw	r30, r28
    237a:	eb 5b       	subi	r30, 0xBB	; 187
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	80 83       	st	Z, r24
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	a2 83       	std	Z+2, r26	; 0x02
    238c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    238e:	8e 01       	movw	r16, r28
    2390:	0f 5b       	subi	r16, 0xBF	; 191
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	eb 5b       	subi	r30, 0xBB	; 187
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	2b ea       	ldi	r18, 0xAB	; 171
    23a4:	3a ea       	ldi	r19, 0xAA	; 170
    23a6:	4a e2       	ldi	r20, 0x2A	; 42
    23a8:	50 e4       	ldi	r21, 0x40	; 64
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	f8 01       	movw	r30, r16
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23bc:	fe 01       	movw	r30, r28
    23be:	ef 5b       	subi	r30, 0xBF	; 191
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	34 f4       	brge	.+12     	; 0x23e6 <LCD_displayCharacter+0x30c>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	fe 01       	movw	r30, r28
    23de:	e0 5c       	subi	r30, 0xC0	; 192
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 83       	st	Z, r24
    23e4:	9d c0       	rjmp	.+314    	; 0x2520 <LCD_displayCharacter+0x446>
	else if (__tmp > 255)
    23e6:	fe 01       	movw	r30, r28
    23e8:	ef 5b       	subi	r30, 0xBF	; 191
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	53 e4       	ldi	r21, 0x43	; 67
    23fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	0c f0       	brlt	.+2      	; 0x2406 <LCD_displayCharacter+0x32c>
    2404:	7e c0       	rjmp	.+252    	; 0x2502 <LCD_displayCharacter+0x428>
	{
		_delay_ms(__us / 1000.0);
    2406:	fe 01       	movw	r30, r28
    2408:	eb 5b       	subi	r30, 0xBB	; 187
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a e7       	ldi	r20, 0x7A	; 122
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8c af       	std	Y+60, r24	; 0x3c
    2426:	9d af       	std	Y+61, r25	; 0x3d
    2428:	ae af       	std	Y+62, r26	; 0x3e
    242a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	6c ad       	ldd	r22, Y+60	; 0x3c
    242e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2430:	8e ad       	ldd	r24, Y+62	; 0x3e
    2432:	9f ad       	ldd	r25, Y+63	; 0x3f
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a ef       	ldi	r20, 0xFA	; 250
    243a:	54 e4       	ldi	r21, 0x44	; 68
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	88 af       	std	Y+56, r24	; 0x38
    2446:	99 af       	std	Y+57, r25	; 0x39
    2448:	aa af       	std	Y+58, r26	; 0x3a
    244a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    244c:	68 ad       	ldd	r22, Y+56	; 0x38
    244e:	79 ad       	ldd	r23, Y+57	; 0x39
    2450:	8a ad       	ldd	r24, Y+58	; 0x3a
    2452:	9b ad       	ldd	r25, Y+59	; 0x3b
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <LCD_displayCharacter+0x394>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9f ab       	std	Y+55, r25	; 0x37
    246a:	8e ab       	std	Y+54, r24	; 0x36
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <LCD_displayCharacter+0x412>
	else if (__tmp > 65535)
    246e:	68 ad       	ldd	r22, Y+56	; 0x38
    2470:	79 ad       	ldd	r23, Y+57	; 0x39
    2472:	8a ad       	ldd	r24, Y+58	; 0x3a
    2474:	9b ad       	ldd	r25, Y+59	; 0x3b
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <LCD_displayCharacter+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	6c ad       	ldd	r22, Y+60	; 0x3c
    2488:	7d ad       	ldd	r23, Y+61	; 0x3d
    248a:	8e ad       	ldd	r24, Y+62	; 0x3e
    248c:	9f ad       	ldd	r25, Y+63	; 0x3f
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9f ab       	std	Y+55, r25	; 0x37
    24ac:	8e ab       	std	Y+54, r24	; 0x36
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <LCD_displayCharacter+0x3f4>
    24b0:	88 ec       	ldi	r24, 0xC8	; 200
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9d ab       	std	Y+53, r25	; 0x35
    24b6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b8:	8c a9       	ldd	r24, Y+52	; 0x34
    24ba:	9d a9       	ldd	r25, Y+53	; 0x35
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_displayCharacter+0x3e2>
    24c0:	9d ab       	std	Y+53, r25	; 0x35
    24c2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8e a9       	ldd	r24, Y+54	; 0x36
    24c6:	9f a9       	ldd	r25, Y+55	; 0x37
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9f ab       	std	Y+55, r25	; 0x37
    24cc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8e a9       	ldd	r24, Y+54	; 0x36
    24d0:	9f a9       	ldd	r25, Y+55	; 0x37
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <LCD_displayCharacter+0x3d6>
    24d6:	2d c0       	rjmp	.+90     	; 0x2532 <LCD_displayCharacter+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	68 ad       	ldd	r22, Y+56	; 0x38
    24da:	79 ad       	ldd	r23, Y+57	; 0x39
    24dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    24de:	9b ad       	ldd	r25, Y+59	; 0x3b
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9f ab       	std	Y+55, r25	; 0x37
    24ea:	8e ab       	std	Y+54, r24	; 0x36
    24ec:	8e a9       	ldd	r24, Y+54	; 0x36
    24ee:	9f a9       	ldd	r25, Y+55	; 0x37
    24f0:	9b ab       	std	Y+51, r25	; 0x33
    24f2:	8a ab       	std	Y+50, r24	; 0x32
    24f4:	8a a9       	ldd	r24, Y+50	; 0x32
    24f6:	9b a9       	ldd	r25, Y+51	; 0x33
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_displayCharacter+0x41e>
    24fc:	9b ab       	std	Y+51, r25	; 0x33
    24fe:	8a ab       	std	Y+50, r24	; 0x32
    2500:	18 c0       	rjmp	.+48     	; 0x2532 <LCD_displayCharacter+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2502:	fe 01       	movw	r30, r28
    2504:	ef 5b       	subi	r30, 0xBF	; 191
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	fe 01       	movw	r30, r28
    251a:	e0 5c       	subi	r30, 0xC0	; 192
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 83       	st	Z, r24
    2520:	fe 01       	movw	r30, r28
    2522:	e0 5c       	subi	r30, 0xC0	; 192
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    252a:	89 a9       	ldd	r24, Y+49	; 0x31
    252c:	8a 95       	dec	r24
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_displayCharacter+0x452>
    2530:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);                     /*tpw-tdsw=190ns*/
	LCD_DATA_PORT = chr;
    2532:	ab e3       	ldi	r26, 0x3B	; 59
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	fe 01       	movw	r30, r28
    2538:	ef 59       	subi	r30, 0x9F	; 159
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	8c 93       	st	X, r24
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a0 e8       	ldi	r26, 0x80	; 128
    2546:	bf e3       	ldi	r27, 0x3F	; 63
    2548:	8d a7       	std	Y+45, r24	; 0x2d
    254a:	9e a7       	std	Y+46, r25	; 0x2e
    254c:	af a7       	std	Y+47, r26	; 0x2f
    254e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2550:	6d a5       	ldd	r22, Y+45	; 0x2d
    2552:	7e a5       	ldd	r23, Y+46	; 0x2e
    2554:	8f a5       	ldd	r24, Y+47	; 0x2f
    2556:	98 a9       	ldd	r25, Y+48	; 0x30
    2558:	2b ea       	ldi	r18, 0xAB	; 171
    255a:	3a ea       	ldi	r19, 0xAA	; 170
    255c:	4a e2       	ldi	r20, 0x2A	; 42
    255e:	50 e4       	ldi	r21, 0x40	; 64
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	89 a7       	std	Y+41, r24	; 0x29
    256a:	9a a7       	std	Y+42, r25	; 0x2a
    256c:	ab a7       	std	Y+43, r26	; 0x2b
    256e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2570:	69 a5       	ldd	r22, Y+41	; 0x29
    2572:	7a a5       	ldd	r23, Y+42	; 0x2a
    2574:	8b a5       	ldd	r24, Y+43	; 0x2b
    2576:	9c a5       	ldd	r25, Y+44	; 0x2c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	1c f4       	brge	.+6      	; 0x258e <LCD_displayCharacter+0x4b4>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	88 a7       	std	Y+40, r24	; 0x28
    258c:	91 c0       	rjmp	.+290    	; 0x26b0 <LCD_displayCharacter+0x5d6>
	else if (__tmp > 255)
    258e:	69 a5       	ldd	r22, Y+41	; 0x29
    2590:	7a a5       	ldd	r23, Y+42	; 0x2a
    2592:	8b a5       	ldd	r24, Y+43	; 0x2b
    2594:	9c a5       	ldd	r25, Y+44	; 0x2c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	53 e4       	ldi	r21, 0x43	; 67
    259e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	0c f0       	brlt	.+2      	; 0x25a8 <LCD_displayCharacter+0x4ce>
    25a6:	7b c0       	rjmp	.+246    	; 0x269e <LCD_displayCharacter+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    25a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    25aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    25ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ae:	98 a9       	ldd	r25, Y+48	; 0x30
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a e7       	ldi	r20, 0x7A	; 122
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8c a3       	std	Y+36, r24	; 0x24
    25c2:	9d a3       	std	Y+37, r25	; 0x25
    25c4:	ae a3       	std	Y+38, r26	; 0x26
    25c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c8:	6c a1       	ldd	r22, Y+36	; 0x24
    25ca:	7d a1       	ldd	r23, Y+37	; 0x25
    25cc:	8e a1       	ldd	r24, Y+38	; 0x26
    25ce:	9f a1       	ldd	r25, Y+39	; 0x27
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a ef       	ldi	r20, 0xFA	; 250
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	88 a3       	std	Y+32, r24	; 0x20
    25e2:	99 a3       	std	Y+33, r25	; 0x21
    25e4:	aa a3       	std	Y+34, r26	; 0x22
    25e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    25e8:	68 a1       	ldd	r22, Y+32	; 0x20
    25ea:	79 a1       	ldd	r23, Y+33	; 0x21
    25ec:	8a a1       	ldd	r24, Y+34	; 0x22
    25ee:	9b a1       	ldd	r25, Y+35	; 0x23
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e8       	ldi	r20, 0x80	; 128
    25f6:	5f e3       	ldi	r21, 0x3F	; 63
    25f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fc:	88 23       	and	r24, r24
    25fe:	2c f4       	brge	.+10     	; 0x260a <LCD_displayCharacter+0x530>
		__ticks = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9f 8f       	std	Y+31, r25	; 0x1f
    2606:	8e 8f       	std	Y+30, r24	; 0x1e
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <LCD_displayCharacter+0x5ae>
	else if (__tmp > 65535)
    260a:	68 a1       	ldd	r22, Y+32	; 0x20
    260c:	79 a1       	ldd	r23, Y+33	; 0x21
    260e:	8a a1       	ldd	r24, Y+34	; 0x22
    2610:	9b a1       	ldd	r25, Y+35	; 0x23
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	3f ef       	ldi	r19, 0xFF	; 255
    2616:	4f e7       	ldi	r20, 0x7F	; 127
    2618:	57 e4       	ldi	r21, 0x47	; 71
    261a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261e:	18 16       	cp	r1, r24
    2620:	4c f5       	brge	.+82     	; 0x2674 <LCD_displayCharacter+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	6c a1       	ldd	r22, Y+36	; 0x24
    2624:	7d a1       	ldd	r23, Y+37	; 0x25
    2626:	8e a1       	ldd	r24, Y+38	; 0x26
    2628:	9f a1       	ldd	r25, Y+39	; 0x27
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9f 8f       	std	Y+31, r25	; 0x1f
    2648:	8e 8f       	std	Y+30, r24	; 0x1e
    264a:	0f c0       	rjmp	.+30     	; 0x266a <LCD_displayCharacter+0x590>
    264c:	88 ec       	ldi	r24, 0xC8	; 200
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9d 8f       	std	Y+29, r25	; 0x1d
    2652:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2654:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2656:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_displayCharacter+0x57e>
    265c:	9d 8f       	std	Y+29, r25	; 0x1d
    265e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2662:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9f 8f       	std	Y+31, r25	; 0x1f
    2668:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    266c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f7       	brne	.-38     	; 0x264c <LCD_displayCharacter+0x572>
    2672:	24 c0       	rjmp	.+72     	; 0x26bc <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	68 a1       	ldd	r22, Y+32	; 0x20
    2676:	79 a1       	ldd	r23, Y+33	; 0x21
    2678:	8a a1       	ldd	r24, Y+34	; 0x22
    267a:	9b a1       	ldd	r25, Y+35	; 0x23
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9f 8f       	std	Y+31, r25	; 0x1f
    2686:	8e 8f       	std	Y+30, r24	; 0x1e
    2688:	8e 8d       	ldd	r24, Y+30	; 0x1e
    268a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    268c:	9b 8f       	std	Y+27, r25	; 0x1b
    268e:	8a 8f       	std	Y+26, r24	; 0x1a
    2690:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2692:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_displayCharacter+0x5ba>
    2698:	9b 8f       	std	Y+27, r25	; 0x1b
    269a:	8a 8f       	std	Y+26, r24	; 0x1a
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_displayCharacter+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    269e:	69 a5       	ldd	r22, Y+41	; 0x29
    26a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	88 a7       	std	Y+40, r24	; 0x28
    26b0:	88 a5       	ldd	r24, Y+40	; 0x28
    26b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b4:	89 8d       	ldd	r24, Y+25	; 0x19
    26b6:	8a 95       	dec	r24
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_displayCharacter+0x5dc>
    26ba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);                     /*tdsw=100ns*/
	CLEAR_BIT(LCD_CONTROL_PORT,E);
    26bc:	a5 e3       	ldi	r26, 0x35	; 53
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e5 e3       	ldi	r30, 0x35	; 53
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8b 7f       	andi	r24, 0xFB	; 251
    26c8:	8c 93       	st	X, r24
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e8       	ldi	r26, 0x80	; 128
    26d0:	bf e3       	ldi	r27, 0x3F	; 63
    26d2:	8d 8b       	std	Y+21, r24	; 0x15
    26d4:	9e 8b       	std	Y+22, r25	; 0x16
    26d6:	af 8b       	std	Y+23, r26	; 0x17
    26d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	2b ea       	ldi	r18, 0xAB	; 171
    26e4:	3a ea       	ldi	r19, 0xAA	; 170
    26e6:	4a e2       	ldi	r20, 0x2A	; 42
    26e8:	50 e4       	ldi	r21, 0x40	; 64
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	89 8b       	std	Y+17, r24	; 0x11
    26f4:	9a 8b       	std	Y+18, r25	; 0x12
    26f6:	ab 8b       	std	Y+19, r26	; 0x13
    26f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26fa:	69 89       	ldd	r22, Y+17	; 0x11
    26fc:	7a 89       	ldd	r23, Y+18	; 0x12
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	1c f4       	brge	.+6      	; 0x2718 <LCD_displayCharacter+0x63e>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	88 8b       	std	Y+16, r24	; 0x10
    2716:	91 c0       	rjmp	.+290    	; 0x283a <LCD_displayCharacter+0x760>
	else if (__tmp > 255)
    2718:	69 89       	ldd	r22, Y+17	; 0x11
    271a:	7a 89       	ldd	r23, Y+18	; 0x12
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	53 e4       	ldi	r21, 0x43	; 67
    2728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <LCD_displayCharacter+0x658>
    2730:	7b c0       	rjmp	.+246    	; 0x2828 <LCD_displayCharacter+0x74e>
	{
		_delay_ms(__us / 1000.0);
    2732:	6d 89       	ldd	r22, Y+21	; 0x15
    2734:	7e 89       	ldd	r23, Y+22	; 0x16
    2736:	8f 89       	ldd	r24, Y+23	; 0x17
    2738:	98 8d       	ldd	r25, Y+24	; 0x18
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8c 87       	std	Y+12, r24	; 0x0c
    274c:	9d 87       	std	Y+13, r25	; 0x0d
    274e:	ae 87       	std	Y+14, r26	; 0x0e
    2750:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6c 85       	ldd	r22, Y+12	; 0x0c
    2754:	7d 85       	ldd	r23, Y+13	; 0x0d
    2756:	8e 85       	ldd	r24, Y+14	; 0x0e
    2758:	9f 85       	ldd	r25, Y+15	; 0x0f
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a ef       	ldi	r20, 0xFA	; 250
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	88 87       	std	Y+8, r24	; 0x08
    276c:	99 87       	std	Y+9, r25	; 0x09
    276e:	aa 87       	std	Y+10, r26	; 0x0a
    2770:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2772:	68 85       	ldd	r22, Y+8	; 0x08
    2774:	79 85       	ldd	r23, Y+9	; 0x09
    2776:	8a 85       	ldd	r24, Y+10	; 0x0a
    2778:	9b 85       	ldd	r25, Y+11	; 0x0b
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <LCD_displayCharacter+0x6ba>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9f 83       	std	Y+7, r25	; 0x07
    2790:	8e 83       	std	Y+6, r24	; 0x06
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <LCD_displayCharacter+0x738>
	else if (__tmp > 65535)
    2794:	68 85       	ldd	r22, Y+8	; 0x08
    2796:	79 85       	ldd	r23, Y+9	; 0x09
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	9b 85       	ldd	r25, Y+11	; 0x0b
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <LCD_displayCharacter+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    27b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9f 83       	std	Y+7, r25	; 0x07
    27d2:	8e 83       	std	Y+6, r24	; 0x06
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <LCD_displayCharacter+0x71a>
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9d 83       	std	Y+5, r25	; 0x05
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_displayCharacter+0x708>
    27e6:	9d 83       	std	Y+5, r25	; 0x05
    27e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	9f 81       	ldd	r25, Y+7	; 0x07
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9f 83       	std	Y+7, r25	; 0x07
    27f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	8e 81       	ldd	r24, Y+6	; 0x06
    27f6:	9f 81       	ldd	r25, Y+7	; 0x07
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <LCD_displayCharacter+0x6fc>
    27fc:	24 c0       	rjmp	.+72     	; 0x2846 <LCD_displayCharacter+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	68 85       	ldd	r22, Y+8	; 0x08
    2800:	79 85       	ldd	r23, Y+9	; 0x09
    2802:	8a 85       	ldd	r24, Y+10	; 0x0a
    2804:	9b 85       	ldd	r25, Y+11	; 0x0b
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_displayCharacter+0x744>
    2822:	9b 83       	std	Y+3, r25	; 0x03
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <LCD_displayCharacter+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2828:	69 89       	ldd	r22, Y+17	; 0x11
    282a:	7a 89       	ldd	r23, Y+18	; 0x12
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	88 8b       	std	Y+16, r24	; 0x10
    283a:	88 89       	ldd	r24, Y+16	; 0x10
    283c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	8a 95       	dec	r24
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0x766>
    2844:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);                     /*tah=13ns*/
 }   /*End LCD_displayCharacter function*/
    2846:	cf 59       	subi	r28, 0x9F	; 159
    2848:	df 4f       	sbci	r29, 0xFF	; 255
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	08 95       	ret

0000285e <LCD_displayString>:

/*A function to display string on LCD:*/
void LCD_displayString(const char*string)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <LCD_displayString+0x6>
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	9b 83       	std	Y+3, r25	; 0x03
    286c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;

	for(i = 0; string[i] != '\0'; i++)LCD_displayCharacter(string[i]);
    286e:	19 82       	std	Y+1, r1	; 0x01
    2870:	0e c0       	rjmp	.+28     	; 0x288e <LCD_displayString+0x30>
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	9b 81       	ldd	r25, Y+3	; 0x03
    287c:	fc 01       	movw	r30, r24
    287e:	e2 0f       	add	r30, r18
    2880:	f3 1f       	adc	r31, r19
    2882:	80 81       	ld	r24, Z
    2884:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_displayCharacter>
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	fc 01       	movw	r30, r24
    289a:	e2 0f       	add	r30, r18
    289c:	f3 1f       	adc	r31, r19
    289e:	80 81       	ld	r24, Z
    28a0:	88 23       	and	r24, r24
    28a2:	39 f7       	brne	.-50     	; 0x2872 <LCD_displayString+0x14>

 }   /*End LCD_displayString function*/
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <LCD_goToRowColumn>:

/*A function to move the cursor to a specific location on LCD*/
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <LCD_goToRowColumn+0x6>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <LCD_goToRowColumn+0x8>
    28b8:	0f 92       	push	r0
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	8a 83       	std	Y+2, r24	; 0x02
    28c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;

	/*Get the desired address on LCD DD RAM*/
	switch(row)
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	3d 83       	std	Y+5, r19	; 0x05
    28ca:	2c 83       	std	Y+4, r18	; 0x04
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	9d 81       	ldd	r25, Y+5	; 0x05
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	91 05       	cpc	r25, r1
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <LCD_goToRowColumn+0x32>
    28d6:	2c 81       	ldd	r18, Y+4	; 0x04
    28d8:	3d 81       	ldd	r19, Y+5	; 0x05
    28da:	22 30       	cpi	r18, 0x02	; 2
    28dc:	31 05       	cpc	r19, r1
    28de:	29 f0       	breq	.+10     	; 0x28ea <LCD_goToRowColumn+0x3a>
    28e0:	07 c0       	rjmp	.+14     	; 0x28f0 <LCD_goToRowColumn+0x40>
	{
	   case 1:
		   address = col - 0x01;
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	81 50       	subi	r24, 0x01	; 1
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <LCD_goToRowColumn+0x40>
		   break;
	   case 2:
		   address = col + 0x3f;
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	81 5c       	subi	r24, 0xC1	; 193
    28ee:	89 83       	std	Y+1, r24	; 0x01
		   break;
	 }   /*End switch(row)*/

	LCD_sendCommand(SET_CURSOR_LOCATION | address);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	80 68       	ori	r24, 0x80	; 128
    28f4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_sendCommand>
 }   /*End LCD_goToRowCloumn function*/
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <LCD_displayStringRowColumn>:

/*A function to display string in a specific location on LCD*/
void LCD_displayStringRowColumn(uint8 row,uint8 col ,const char* str)
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	00 d0       	rcall	.+0      	; 0x290e <LCD_displayStringRowColumn+0x6>
    290e:	00 d0       	rcall	.+0      	; 0x2910 <LCD_displayStringRowColumn+0x8>
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	6a 83       	std	Y+2, r22	; 0x02
    2918:	5c 83       	std	Y+4, r21	; 0x04
    291a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	6a 81       	ldd	r22, Y+2	; 0x02
    2920:	0e 94 58 14 	call	0x28b0	; 0x28b0 <LCD_goToRowColumn>
	LCD_displayString(str);
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_displayString>
 }   /*End LCD_displayStringRowCloumn function*/
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <LCD_clearScreen>:

/*A function to clear LCD screen:*/
void LCD_clearScreen()
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_sendCommand>
 }   /*End LCD_clearScreen function*/
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_intgerToString>:

/*A function to display integer on LCD:*/
void LCD_intgerToString(int num)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	66 97       	sbiw	r28, 0x16	; 22
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	9e 8b       	std	Y+22, r25	; 0x16
    2964:	8d 8b       	std	Y+21, r24	; 0x15
	char buff[20];
	itoa(num,buff,10);
    2966:	8d 89       	ldd	r24, Y+21	; 0x15
    2968:	9e 89       	ldd	r25, Y+22	; 0x16
    296a:	9e 01       	movw	r18, r28
    296c:	2f 5f       	subi	r18, 0xFF	; 255
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	b9 01       	movw	r22, r18
    2972:	4a e0       	ldi	r20, 0x0A	; 10
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <itoa>
	LCD_displayString(buff);
    297a:	ce 01       	movw	r24, r28
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_displayString>
 }   /*End LCD_integerToString function*/
    2982:	66 96       	adiw	r28, 0x16	; 22
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <Timer0_PWM_Init>:
static volatile void(*g_callBackPtr)() = NULL_PTR;

/*-------------------------->Public Functions Definitions<------------------------------*/
/* A function to initialize Timer0 in PWM Mode: */
void Timer0_PWM_Init(uint8 DutyCycle)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	0f 92       	push	r0
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB,PB3);   /* OC0(PB3) is output to generate PWM Signal */
    29a0:	a7 e3       	ldi	r26, 0x37	; 55
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e7 e3       	ldi	r30, 0x37	; 55
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	88 60       	ori	r24, 0x08	; 8
    29ac:	8c 93       	st	X, r24
	/* Timer/Counter0 Control Register TCCR0
	 * WGM01:0=0b11 To select fast PWM mode
	 * COM01:0=0b10 To select PWM non-inverting mode
	 * CS02:0=0b010 To select prescaler=8
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    29ae:	e3 e5       	ldi	r30, 0x53	; 83
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	8a e6       	ldi	r24, 0x6A	; 106
    29b4:	80 83       	st	Z, r24

	TCNT0 = 0;          /* Timer0 initial value=0 */
    29b6:	e2 e5       	ldi	r30, 0x52	; 82
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	10 82       	st	Z, r1
	OCR0 = DutyCycle;   /* Set OCR0 by the desired duty cycle */
    29bc:	ec e5       	ldi	r30, 0x5C	; 92
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	80 83       	st	Z, r24

 }   /* End Timer0_PWM_Init function */
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Timer_init>:

/* A function to initialize all timers */
void Timer_init(const TimerConfig*config_Ptr)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <Timer_init+0x6>
    29d2:	0f 92       	push	r0
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01

	if(config_Ptr->timer == TIMER0 && config_Ptr->mode == NORMAL)
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	80 81       	ld	r24, Z
    29e2:	88 23       	and	r24, r24
    29e4:	a1 f4       	brne	.+40     	; 0x2a0e <Timer_init+0x42>
    29e6:	e9 81       	ldd	r30, Y+1	; 0x01
    29e8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ea:	81 81       	ldd	r24, Z+1	; 0x01
    29ec:	88 23       	and	r24, r24
    29ee:	79 f4       	brne	.+30     	; 0x2a0e <Timer_init+0x42>
	{
		TCNT0 = 0;
    29f0:	e2 e5       	ldi	r30, 0x52	; 82
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	10 82       	st	Z, r1
		SET_BIT(TIMSK, TOIE0);
    29f6:	a9 e5       	ldi	r26, 0x59	; 89
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e9 e5       	ldi	r30, 0x59	; 89
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	81 60       	ori	r24, 0x01	; 1
    2a02:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    2a04:	e3 e5       	ldi	r30, 0x53	; 83
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	85 e8       	ldi	r24, 0x85	; 133
    2a0a:	80 83       	st	Z, r24
    2a0c:	6a c0       	rjmp	.+212    	; 0x2ae2 <Timer_init+0x116>
	}   /* End if(config_Ptr->timer==TIMER0) */
	else if(config_Ptr->timer == TIMER1)
    2a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a10:	fa 81       	ldd	r31, Y+2	; 0x02
    2a12:	80 81       	ld	r24, Z
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <Timer_init+0x4e>
    2a18:	61 c0       	rjmp	.+194    	; 0x2adc <Timer_init+0x110>
	{

		if(config_Ptr->mode == NORMAL)
    2a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1e:	81 81       	ldd	r24, Z+1	; 0x01
    2a20:	88 23       	and	r24, r24
    2a22:	09 f5       	brne	.+66     	; 0x2a66 <Timer_init+0x9a>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 normal mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (Normal mode)
			 * WGM11:10=0b00              No wave generation (Normal mode)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2a24:	ef e4       	ldi	r30, 0x4F	; 79
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	8c e0       	ldi	r24, 0x0C	; 12
    2a2a:	80 83       	st	Z, r24
			/*
			 * Timer/Counter Control Register1 B (TCCR1B)
			 * CS12:10=config_Ptr->clock   To select the desired prescaler
			 *
			 */
			TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
    2a2c:	ae e4       	ldi	r26, 0x4E	; 78
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	ee e4       	ldi	r30, 0x4E	; 78
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	98 2f       	mov	r25, r24
    2a38:	98 7f       	andi	r25, 0xF8	; 248
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	84 81       	ldd	r24, Z+4	; 0x04
    2a40:	89 2b       	or	r24, r25
    2a42:	8c 93       	st	X, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1 = config_Ptr->initialValue;
    2a44:	ac e4       	ldi	r26, 0x4C	; 76
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	9c 93       	st	X, r25
    2a54:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * TOIE1=1   To enable the overflow interrupt
			 */
			SET_BIT(TIMSK, TOIE1);
    2a56:	a9 e5       	ldi	r26, 0x59	; 89
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e9 e5       	ldi	r30, 0x59	; 89
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	84 60       	ori	r24, 0x04	; 4
    2a62:	8c 93       	st	X, r24
    2a64:	3e c0       	rjmp	.+124    	; 0x2ae2 <Timer_init+0x116>

		}   /* End else if(config_Ptr->timer==TIMER1&&config_Ptr->mode==NORMAL) */
		else if(config_Ptr->mode == COMPARE)
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	81 81       	ldd	r24, Z+1	; 0x01
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	c9 f5       	brne	.+114    	; 0x2ae2 <Timer_init+0x116>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 compare mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (compare mode)
			 * WGM11:10=0b00              No wave generation (compare mode)
			 */
			TCCR1A = (1<<FOC1A);
    2a70:	ef e4       	ldi	r30, 0x4F	; 79
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	88 e0       	ldi	r24, 0x08	; 8
    2a76:	80 83       	st	Z, r24
			/*
			 * Timer/Counter Control Register1 B (TCCR1B)
			 * CS12:10=config_Ptr->clock   To select the desired prescaler
			 * WGM10:13=0100,WGM12=1       To selclet Clear TCNT1 on Compare match mode(CTC mode)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
    2a78:	ae e4       	ldi	r26, 0x4E	; 78
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	ee e4       	ldi	r30, 0x4E	; 78
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	98 2f       	mov	r25, r24
    2a84:	98 7f       	andi	r25, 0xF8	; 248
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8a:	84 81       	ldd	r24, Z+4	; 0x04
    2a8c:	89 2b       	or	r24, r25
    2a8e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2a90:	ae e4       	ldi	r26, 0x4E	; 78
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 60       	ori	r24, 0x08	; 8
    2a9c:	8c 93       	st	X, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1L = config_Ptr->initialValue;
    2a9e:	ac e4       	ldi	r26, 0x4C	; 76
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	8c 93       	st	X, r24
			TCNT1H = config_Ptr->initialValue;
    2aac:	ad e4       	ldi	r26, 0x4D	; 77
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	8c 93       	st	X, r24

			/*
			 * Output Compare Register 1 A OCR1A
			 * OCR1A=config_Ptr->compareValue   To set the compare match value in CTC
			 */
			OCR1A = config_Ptr->compareValue;
    2aba:	aa e4       	ldi	r26, 0x4A	; 74
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac2:	85 81       	ldd	r24, Z+5	; 0x05
    2ac4:	96 81       	ldd	r25, Z+6	; 0x06
    2ac6:	11 96       	adiw	r26, 0x01	; 1
    2ac8:	9c 93       	st	X, r25
    2aca:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * OCIE1A=1   To enable the Output Compare A match interrupt
			 */
			SET_BIT(TIMSK, OCIE1A);
    2acc:	a9 e5       	ldi	r26, 0x59	; 89
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e9 e5       	ldi	r30, 0x59	; 89
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 61       	ori	r24, 0x10	; 16
    2ad8:	8c 93       	st	X, r24
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <Timer_init+0x116>
		}   /* End else if(config_Ptr->mode==COMPARE) */
	}
	else if(config_Ptr->timer == TIMER2 && config_Ptr->mode == NORMAL)
    2adc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ade:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae0:	80 81       	ld	r24, Z
	{
	}   /* End if(config_ptr->timer==TIMER2&&config_Ptr->mode==NORMAL) */


}   /* End Timer_Init(const TimerConfig*config_Ptr) Function */
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <Timer_stop>:

/* A function to stop all timers*/
void Timer_stop(TimerSelect timer)
{
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	0f 92       	push	r0
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	89 83       	std	Y+1, r24	; 0x01

	if(timer == TIMER1)
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	81 30       	cpi	r24, 0x01	; 1
    2afe:	51 f4       	brne	.+20     	; 0x2b14 <Timer_stop+0x26>
	{
		/* clear all timer1 registers */
		TCCR1A = 0;
    2b00:	ef e4       	ldi	r30, 0x4F	; 79
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	10 82       	st	Z, r1
		TCCR1B = 0;
    2b06:	ee e4       	ldi	r30, 0x4E	; 78
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	10 82       	st	Z, r1
		TCNT1 = 0;
    2b0c:	ec e4       	ldi	r30, 0x4C	; 76
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	11 82       	std	Z+1, r1	; 0x01
    2b12:	10 82       	st	Z, r1
	}   /* End if(timer==TIMER1) */
}   /* End Timer_stop() function */
    2b14:	0f 90       	pop	r0
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <Timer_clearValue>:

/* A function to clear the selected timer value */
void Timer_clearValue(TimerSelect timer)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	89 83       	std	Y+1, r24	; 0x01

	if(timer == TIMER0)TCNT0 = 0;
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	88 23       	and	r24, r24
    2b2c:	21 f4       	brne	.+8      	; 0x2b36 <Timer_clearValue+0x1a>
    2b2e:	e2 e5       	ldi	r30, 0x52	; 82
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	10 82       	st	Z, r1
    2b34:	0e c0       	rjmp	.+28     	; 0x2b52 <Timer_clearValue+0x36>
	else if(timer == TIMER1)TCNT1 = 0;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <Timer_clearValue+0x2a>
    2b3c:	ec e4       	ldi	r30, 0x4C	; 76
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	11 82       	std	Z+1, r1	; 0x01
    2b42:	10 82       	st	Z, r1
    2b44:	06 c0       	rjmp	.+12     	; 0x2b52 <Timer_clearValue+0x36>
	else if(timer == TIMER2)TCNT2 = 0;
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	19 f4       	brne	.+6      	; 0x2b52 <Timer_clearValue+0x36>
    2b4c:	e4 e4       	ldi	r30, 0x44	; 68
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	10 82       	st	Z, r1

}   /* End Timer_clearValue() function */
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_Ptr)())
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <Timer1_setCallBack+0x6>
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_Ptr;
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	90 93 53 01 	sts	0x0153, r25
    2b70:	80 93 52 01 	sts	0x0152, r24
}   /* End Timer1_setCallBack() function */
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
    2b88:	2f 93       	push	r18
    2b8a:	3f 93       	push	r19
    2b8c:	4f 93       	push	r20
    2b8e:	5f 93       	push	r21
    2b90:	6f 93       	push	r22
    2b92:	7f 93       	push	r23
    2b94:	8f 93       	push	r24
    2b96:	9f 93       	push	r25
    2b98:	af 93       	push	r26
    2b9a:	bf 93       	push	r27
    2b9c:	ef 93       	push	r30
    2b9e:	ff 93       	push	r31
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)(*g_callBackPtr)();
    2ba8:	80 91 52 01 	lds	r24, 0x0152
    2bac:	90 91 53 01 	lds	r25, 0x0153
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	29 f0       	breq	.+10     	; 0x2bbe <__vector_6+0x40>
    2bb4:	e0 91 52 01 	lds	r30, 0x0152
    2bb8:	f0 91 53 01 	lds	r31, 0x0153
    2bbc:	09 95       	icall
}   /* End ISR(TIMER1_COMPA_vect)Function */
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	ff 91       	pop	r31
    2bc4:	ef 91       	pop	r30
    2bc6:	bf 91       	pop	r27
    2bc8:	af 91       	pop	r26
    2bca:	9f 91       	pop	r25
    2bcc:	8f 91       	pop	r24
    2bce:	7f 91       	pop	r23
    2bd0:	6f 91       	pop	r22
    2bd2:	5f 91       	pop	r21
    2bd4:	4f 91       	pop	r20
    2bd6:	3f 91       	pop	r19
    2bd8:	2f 91       	pop	r18
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	0f 90       	pop	r0
    2be0:	1f 90       	pop	r1
    2be2:	18 95       	reti

00002be4 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	//if(g_callBackPtr != NULL_PTR)(*g_callBackPtr)();
}
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	0f 90       	pop	r0
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	0f 90       	pop	r0
    2c00:	1f 90       	pop	r1
    2c02:	18 95       	reti

00002c04 <UART_init>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/*---------------------------------->Public functions definitions<------------------------------*/
/* A function to initialize UART module */
void UART_init(UART_config*config_Ptr)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <UART_init+0x6>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <UART_init+0x8>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
	 * UDRE=0        UDR is empty in the beginning
	 * FE,DOR,PE=0   To disable Frame Error,Data Overrun Error and Parity Error respectively
	 * U2X=1         To enable Asynchronous double speed mode
	 * MPCM=0        To disable Multi-Processor Communication Mode
	 */
	SET_BIT(UCSRA,U2X);
    2c14:	ab e2       	ldi	r26, 0x2B	; 43
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	eb e2       	ldi	r30, 0x2B	; 43
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	82 60       	ori	r24, 0x02	; 2
    2c20:	8c 93       	st	X, r24
	 *  RXEN=1         To enable UART to receive data
	 *  TXEN=1         To enable UART to transmit data
	 *  If nine bits character size is selected in the configuration structure
	 *  then: UCSZ2=1
	 */
	UCSRB = (UCSRB & 0x67) | 0x98;
    2c22:	aa e2       	ldi	r26, 0x2A	; 42
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ea e2       	ldi	r30, 0x2A	; 42
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	88 69       	ori	r24, 0x98	; 152
    2c2e:	8c 93       	st	X, r24
	if(config_Ptr->DataSize == NINE_BITS)SET_BIT(UCSRB,UCSZ2);
    2c30:	eb 81       	ldd	r30, Y+3	; 0x03
    2c32:	fc 81       	ldd	r31, Y+4	; 0x04
    2c34:	80 81       	ld	r24, Z
    2c36:	87 30       	cpi	r24, 0x07	; 7
    2c38:	39 f4       	brne	.+14     	; 0x2c48 <UART_init+0x44>
    2c3a:	aa e2       	ldi	r26, 0x2A	; 42
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	ea e2       	ldi	r30, 0x2A	; 42
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	84 60       	ori	r24, 0x04	; 4
    2c46:	8c 93       	st	X, r24
	 * UMSEL=0                       To select Asynchronous Operation
	 * UPM1:0=a_config->ParityType   To Select the desired parity type
	 * USBS=a_config->NoStopBits     To select the desired number of stop bits
	 * UCSZ1:0=a_config->DataSize    To select the desired character size
	 */
	SET_BIT(UCSRC,URSEL);
    2c48:	a0 e4       	ldi	r26, 0x40	; 64
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e0 e4       	ldi	r30, 0x40	; 64
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	80 68       	ori	r24, 0x80	; 128
    2c54:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | (config_Ptr->ParityType << 4);
    2c56:	a0 e4       	ldi	r26, 0x40	; 64
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e0 e4       	ldi	r30, 0x40	; 64
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	2f 7c       	andi	r18, 0xCF	; 207
    2c64:	eb 81       	ldd	r30, Y+3	; 0x03
    2c66:	fc 81       	ldd	r31, Y+4	; 0x04
    2c68:	81 81       	ldd	r24, Z+1	; 0x01
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	82 95       	swap	r24
    2c70:	92 95       	swap	r25
    2c72:	90 7f       	andi	r25, 0xF0	; 240
    2c74:	98 27       	eor	r25, r24
    2c76:	80 7f       	andi	r24, 0xF0	; 240
    2c78:	98 27       	eor	r25, r24
    2c7a:	82 2b       	or	r24, r18
    2c7c:	8c 93       	st	X, r24
	if(config_Ptr->NoStopBits == TWO)SET_BIT(UCSRC,USBS);
    2c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c80:	fc 81       	ldd	r31, Y+4	; 0x04
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	39 f4       	brne	.+14     	; 0x2c96 <UART_init+0x92>
    2c88:	a0 e4       	ldi	r26, 0x40	; 64
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e0 e4       	ldi	r30, 0x40	; 64
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	88 60       	ori	r24, 0x08	; 8
    2c94:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((config_Ptr->DataSize & 0x03)<<1);
    2c96:	a0 e4       	ldi	r26, 0x40	; 64
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e0 e4       	ldi	r30, 0x40	; 64
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	29 7f       	andi	r18, 0xF9	; 249
    2ca4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	83 70       	andi	r24, 0x03	; 3
    2cb0:	90 70       	andi	r25, 0x00	; 0
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	82 2b       	or	r24, r18
    2cb8:	8c 93       	st	X, r24

	/* UART Baud Rate Register
	 * UBRR=config_Ptr->BaudRate   To Select the desired baud rate
	 */
	UART_preScale = (F_CPU /( 8 * (config_Ptr->BaudRate))) - 1;
    2cba:	eb 81       	ldd	r30, Y+3	; 0x03
    2cbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cbe:	83 81       	ldd	r24, Z+3	; 0x03
    2cc0:	94 81       	ldd	r25, Z+4	; 0x04
    2cc2:	a5 81       	ldd	r26, Z+5	; 0x05
    2cc4:	b6 81       	ldd	r27, Z+6	; 0x06
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	aa 1f       	adc	r26, r26
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	aa 1f       	adc	r26, r26
    2cdc:	bb 1f       	adc	r27, r27
    2cde:	9c 01       	movw	r18, r24
    2ce0:	ad 01       	movw	r20, r26
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	92 e1       	ldi	r25, 0x12	; 18
    2ce6:	aa e7       	ldi	r26, 0x7A	; 122
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodsi4>
    2cf2:	da 01       	movw	r26, r20
    2cf4:	c9 01       	movw	r24, r18
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	//CLEAR_BIT(UCSRC,URSEL);
	UBRRH = (UART_preScale >> 8);
    2cfc:	e0 e4       	ldi	r30, 0x40	; 64
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	89 2f       	mov	r24, r25
    2d06:	99 27       	eor	r25, r25
    2d08:	80 83       	st	Z, r24
	UBRRL = UART_preScale;
    2d0a:	e9 e2       	ldi	r30, 0x29	; 41
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	80 83       	st	Z, r24

}   /* End UART_init()function */
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <UART_sendByte>:

/* A function to send byte */
void UART_sendByte(const uint8 data)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	0f 92       	push	r0
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));   /* Wait until UDR became empty */
    2d2c:	eb e2       	ldi	r30, 0x2B	; 43
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	80 72       	andi	r24, 0x20	; 32
    2d38:	90 70       	andi	r25, 0x00	; 0
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	b9 f3       	breq	.-18     	; 0x2d2c <UART_sendByte+0xc>

	/* Put the required data in UDR and this also clear the UDRE flag because UDR isn't empty now */
	UDR = data;
    2d3e:	ec e2       	ldi	r30, 0x2C	; 44
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	80 83       	st	Z, r24
}   /* End UART_sendByte()function */
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <UART_receiveByte>:

/* A function to receive byte */
uint8 UART_receiveByte()
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEAR(UCSRA,RXC));   /* Wait until there's new unread data in UDR */
    2d56:	eb e2       	ldi	r30, 0x2B	; 43
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	88 23       	and	r24, r24
    2d5e:	dc f7       	brge	.-10     	; 0x2d56 <UART_receiveByte+0x8>
	return UDR;                       /* return this data */
    2d60:	ec e2       	ldi	r30, 0x2C	; 44
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
}   /* End UART_recieveByte()function */
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <UART_sendString>:

/* A function to send a string */
void UART_sendString(const uint8*string_Ptr)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <UART_sendString+0x6>
    2d72:	0f 92       	push	r0
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	9b 83       	std	Y+3, r25	; 0x03
    2d7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d7c:	19 82       	std	Y+1, r1	; 0x01
    2d7e:	0e c0       	rjmp	.+28     	; 0x2d9c <UART_sendString+0x30>

	while(string_Ptr[i] != '\0')
	{
		UART_sendByte(string_Ptr[i]);
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 0f       	add	r30, r18
    2d8e:	f3 1f       	adc	r31, r19
    2d90:	80 81       	ld	r24, Z
    2d92:	0e 94 90 16 	call	0x2d20	; 0x2d20 <UART_sendByte>
		i++;
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	89 83       	std	Y+1, r24	; 0x01
/* A function to send a string */
void UART_sendString(const uint8*string_Ptr)
{
	uint8 i = 0;

	while(string_Ptr[i] != '\0')
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	9b 81       	ldd	r25, Y+3	; 0x03
    2da6:	fc 01       	movw	r30, r24
    2da8:	e2 0f       	add	r30, r18
    2daa:	f3 1f       	adc	r31, r19
    2dac:	80 81       	ld	r24, Z
    2dae:	88 23       	and	r24, r24
    2db0:	39 f7       	brne	.-50     	; 0x2d80 <UART_sendString+0x14>
	{
		UART_sendByte(string_Ptr[i]);
		i++;
	}   /* End while(string_Ptr[i] != '\0') */

}   /* End UART_sendString(uint8*) function */
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <UART_receiveString>:

/* A function to receive a string */
void UART_receiveString(uint8*Str)
{
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <UART_receiveString+0xa>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	9b 83       	std	Y+3, r25	; 0x03
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dd2:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_receiveByte();   /* To receive the first character in the string */
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dde:	8c 01       	movw	r16, r24
    2de0:	02 0f       	add	r16, r18
    2de2:	13 1f       	adc	r17, r19
    2de4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_receiveByte>
    2de8:	f8 01       	movw	r30, r16
    2dea:	80 83       	st	Z, r24
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <UART_receiveString+0x4e>

	while(Str[i] != '#')           /* '#'is a unique symbol as the end of string indication */
	{
		i++;
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	8c 01       	movw	r16, r24
    2e00:	02 0f       	add	r16, r18
    2e02:	13 1f       	adc	r17, r19
    2e04:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_receiveByte>
    2e08:	f8 01       	movw	r30, r16
    2e0a:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_receiveByte();   /* To receive the first character in the string */

	while(Str[i] != '#')           /* '#'is a unique symbol as the end of string indication */
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	9b 81       	ldd	r25, Y+3	; 0x03
    2e16:	fc 01       	movw	r30, r24
    2e18:	e2 0f       	add	r30, r18
    2e1a:	f3 1f       	adc	r31, r19
    2e1c:	80 81       	ld	r24, Z
    2e1e:	83 32       	cpi	r24, 0x23	; 35
    2e20:	31 f7       	brne	.-52     	; 0x2dee <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}                             /* End while(Str[i] != '#') */

	Str[i] = '\0';                /* Replace'#' with the null character to make it a valid string */
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e2 0f       	add	r30, r18
    2e30:	f3 1f       	adc	r31, r19
    2e32:	10 82       	st	Z, r1
}   /* End UART_receiveString()function */
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	08 95       	ret

00002e44 <UART_setCallBack>:

void UART_setCallBack(void(*a_Ptr)())
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <UART_setCallBack+0x6>
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
		g_callBackPtr = a_Ptr;
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	9a 81       	ldd	r25, Y+2	; 0x02
    2e56:	90 93 55 01 	sts	0x0155, r25
    2e5a:	80 93 54 01 	sts	0x0154, r24

}   /* End UART_setCallBack()function */
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <__vector_11>:

ISR(USART_RXC_vect)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	UART_receiveBuffer = UART_receiveByte();
    2e92:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_receiveByte>
    2e96:	80 93 6b 01 	sts	0x016B, r24

	if(g_callBackPtr != NULL_PTR)(*g_callBackPtr)();
    2e9a:	80 91 54 01 	lds	r24, 0x0154
    2e9e:	90 91 55 01 	lds	r25, 0x0155
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	29 f0       	breq	.+10     	; 0x2eb0 <__vector_11+0x48>
    2ea6:	e0 91 54 01 	lds	r30, 0x0154
    2eaa:	f0 91 55 01 	lds	r31, 0x0155
    2eae:	09 95       	icall

}   /* End ISR(USART_RXC_vect) */
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	ff 91       	pop	r31
    2eb6:	ef 91       	pop	r30
    2eb8:	bf 91       	pop	r27
    2eba:	af 91       	pop	r26
    2ebc:	9f 91       	pop	r25
    2ebe:	8f 91       	pop	r24
    2ec0:	7f 91       	pop	r23
    2ec2:	6f 91       	pop	r22
    2ec4:	5f 91       	pop	r21
    2ec6:	4f 91       	pop	r20
    2ec8:	3f 91       	pop	r19
    2eca:	2f 91       	pop	r18
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0
    2ed2:	1f 90       	pop	r1
    2ed4:	18 95       	reti

00002ed6 <__udivmodsi4>:
    2ed6:	a1 e2       	ldi	r26, 0x21	; 33
    2ed8:	1a 2e       	mov	r1, r26
    2eda:	aa 1b       	sub	r26, r26
    2edc:	bb 1b       	sub	r27, r27
    2ede:	fd 01       	movw	r30, r26
    2ee0:	0d c0       	rjmp	.+26     	; 0x2efc <__udivmodsi4_ep>

00002ee2 <__udivmodsi4_loop>:
    2ee2:	aa 1f       	adc	r26, r26
    2ee4:	bb 1f       	adc	r27, r27
    2ee6:	ee 1f       	adc	r30, r30
    2ee8:	ff 1f       	adc	r31, r31
    2eea:	a2 17       	cp	r26, r18
    2eec:	b3 07       	cpc	r27, r19
    2eee:	e4 07       	cpc	r30, r20
    2ef0:	f5 07       	cpc	r31, r21
    2ef2:	20 f0       	brcs	.+8      	; 0x2efc <__udivmodsi4_ep>
    2ef4:	a2 1b       	sub	r26, r18
    2ef6:	b3 0b       	sbc	r27, r19
    2ef8:	e4 0b       	sbc	r30, r20
    2efa:	f5 0b       	sbc	r31, r21

00002efc <__udivmodsi4_ep>:
    2efc:	66 1f       	adc	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	88 1f       	adc	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	1a 94       	dec	r1
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <__udivmodsi4_loop>
    2f08:	60 95       	com	r22
    2f0a:	70 95       	com	r23
    2f0c:	80 95       	com	r24
    2f0e:	90 95       	com	r25
    2f10:	9b 01       	movw	r18, r22
    2f12:	ac 01       	movw	r20, r24
    2f14:	bd 01       	movw	r22, r26
    2f16:	cf 01       	movw	r24, r30
    2f18:	08 95       	ret

00002f1a <__prologue_saves__>:
    2f1a:	2f 92       	push	r2
    2f1c:	3f 92       	push	r3
    2f1e:	4f 92       	push	r4
    2f20:	5f 92       	push	r5
    2f22:	6f 92       	push	r6
    2f24:	7f 92       	push	r7
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	ca 1b       	sub	r28, r26
    2f44:	db 0b       	sbc	r29, r27
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	09 94       	ijmp

00002f52 <__epilogue_restores__>:
    2f52:	2a 88       	ldd	r2, Y+18	; 0x12
    2f54:	39 88       	ldd	r3, Y+17	; 0x11
    2f56:	48 88       	ldd	r4, Y+16	; 0x10
    2f58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f64:	b9 84       	ldd	r11, Y+9	; 0x09
    2f66:	c8 84       	ldd	r12, Y+8	; 0x08
    2f68:	df 80       	ldd	r13, Y+7	; 0x07
    2f6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f70:	1b 81       	ldd	r17, Y+3	; 0x03
    2f72:	aa 81       	ldd	r26, Y+2	; 0x02
    2f74:	b9 81       	ldd	r27, Y+1	; 0x01
    2f76:	ce 0f       	add	r28, r30
    2f78:	d1 1d       	adc	r29, r1
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	ed 01       	movw	r28, r26
    2f86:	08 95       	ret

00002f88 <strcmp>:
    2f88:	fb 01       	movw	r30, r22
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	8d 91       	ld	r24, X+
    2f8e:	01 90       	ld	r0, Z+
    2f90:	80 19       	sub	r24, r0
    2f92:	01 10       	cpse	r0, r1
    2f94:	d9 f3       	breq	.-10     	; 0x2f8c <strcmp+0x4>
    2f96:	99 0b       	sbc	r25, r25
    2f98:	08 95       	ret

00002f9a <itoa>:
    2f9a:	fb 01       	movw	r30, r22
    2f9c:	9f 01       	movw	r18, r30
    2f9e:	e8 94       	clt
    2fa0:	42 30       	cpi	r20, 0x02	; 2
    2fa2:	c4 f0       	brlt	.+48     	; 0x2fd4 <itoa+0x3a>
    2fa4:	45 32       	cpi	r20, 0x25	; 37
    2fa6:	b4 f4       	brge	.+44     	; 0x2fd4 <itoa+0x3a>
    2fa8:	4a 30       	cpi	r20, 0x0A	; 10
    2faa:	29 f4       	brne	.+10     	; 0x2fb6 <itoa+0x1c>
    2fac:	97 fb       	bst	r25, 7
    2fae:	1e f4       	brtc	.+6      	; 0x2fb6 <itoa+0x1c>
    2fb0:	90 95       	com	r25
    2fb2:	81 95       	neg	r24
    2fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb6:	64 2f       	mov	r22, r20
    2fb8:	77 27       	eor	r23, r23
    2fba:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__udivmodhi4>
    2fbe:	80 5d       	subi	r24, 0xD0	; 208
    2fc0:	8a 33       	cpi	r24, 0x3A	; 58
    2fc2:	0c f0       	brlt	.+2      	; 0x2fc6 <itoa+0x2c>
    2fc4:	89 5d       	subi	r24, 0xD9	; 217
    2fc6:	81 93       	st	Z+, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	a1 f7       	brne	.-24     	; 0x2fb6 <itoa+0x1c>
    2fce:	16 f4       	brtc	.+4      	; 0x2fd4 <itoa+0x3a>
    2fd0:	5d e2       	ldi	r21, 0x2D	; 45
    2fd2:	51 93       	st	Z+, r21
    2fd4:	10 82       	st	Z, r1
    2fd6:	c9 01       	movw	r24, r18
    2fd8:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <strrev>

00002fdc <strrev>:
    2fdc:	dc 01       	movw	r26, r24
    2fde:	fc 01       	movw	r30, r24
    2fe0:	67 2f       	mov	r22, r23
    2fe2:	71 91       	ld	r23, Z+
    2fe4:	77 23       	and	r23, r23
    2fe6:	e1 f7       	brne	.-8      	; 0x2fe0 <strrev+0x4>
    2fe8:	32 97       	sbiw	r30, 0x02	; 2
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <strrev+0x18>
    2fec:	7c 91       	ld	r23, X
    2fee:	6d 93       	st	X+, r22
    2ff0:	70 83       	st	Z, r23
    2ff2:	62 91       	ld	r22, -Z
    2ff4:	ae 17       	cp	r26, r30
    2ff6:	bf 07       	cpc	r27, r31
    2ff8:	c8 f3       	brcs	.-14     	; 0x2fec <strrev+0x10>
    2ffa:	08 95       	ret

00002ffc <__udivmodhi4>:
    2ffc:	aa 1b       	sub	r26, r26
    2ffe:	bb 1b       	sub	r27, r27
    3000:	51 e1       	ldi	r21, 0x11	; 17
    3002:	07 c0       	rjmp	.+14     	; 0x3012 <__udivmodhi4_ep>

00003004 <__udivmodhi4_loop>:
    3004:	aa 1f       	adc	r26, r26
    3006:	bb 1f       	adc	r27, r27
    3008:	a6 17       	cp	r26, r22
    300a:	b7 07       	cpc	r27, r23
    300c:	10 f0       	brcs	.+4      	; 0x3012 <__udivmodhi4_ep>
    300e:	a6 1b       	sub	r26, r22
    3010:	b7 0b       	sbc	r27, r23

00003012 <__udivmodhi4_ep>:
    3012:	88 1f       	adc	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	5a 95       	dec	r21
    3018:	a9 f7       	brne	.-22     	; 0x3004 <__udivmodhi4_loop>
    301a:	80 95       	com	r24
    301c:	90 95       	com	r25
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	08 95       	ret

00003024 <_exit>:
    3024:	f8 94       	cli

00003026 <__stop_program>:
    3026:	ff cf       	rjmp	.-2      	; 0x3026 <__stop_program>
